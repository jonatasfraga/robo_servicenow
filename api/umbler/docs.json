{
  "openapi": "3.0.1",
  "info": {
    "title": "Umbler.UTalk.Api",
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://app-utalk.umbler.com/api"
    }
  ],
  "paths": {
    "/v1/activity-logs/": {
      "get": {
        "tags": [
          "ActivityLogs"
        ],
        "summary": "Returns a paginated list of the most recent events in the selected organization. Note that if you have a permission below admin, you can only query your own events.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "UTalkUserId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "StartDateUTC",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDateUTC",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "How many items to skip before start taking ones to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "The amount of items to get after the specified offset. Can be more than there are items available, but not more than this route's limit of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Behavior",
            "in": "query",
            "description": "How the query should execute",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaginationBehavior"
                }
              ],
              "default": "GetSliceOnly"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfActivityLogModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfActivityLogModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfActivityLogModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bots/": {
      "get": {
        "tags": [
          "Bots"
        ],
        "summary": "Gets a paginated list of all the bots of all types of one organization. Optionally filtering by a single channel",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "How many items to skip before start taking ones to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "The amount of items to get after the specified offset. Can be more than there are items available, but not more than this route's limit of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Behavior",
            "in": "query",
            "description": "How the query should execute",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaginationBehavior"
                }
              ],
              "default": "GetSliceOnly"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfBotBaseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfBotBaseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfBotBaseModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bots/{id}/": {
      "get": {
        "tags": [
          "Bots"
        ],
        "summary": "Gets a single bot of any type",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BotBaseWrapperModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotBaseWrapperModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotBaseWrapperModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Bots"
        ],
        "summary": "Deletes a bot of any type then returns it",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BotBaseWrapperModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotBaseWrapperModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotBaseWrapperModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bots"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateBotModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateBotModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateBotModel"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BotBaseWrapperModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotBaseWrapperModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotBaseWrapperModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bots/swap/": {
      "post": {
        "tags": [
          "Bots"
        ],
        "summary": "Swaps the order of two bots of any type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SwapBotsModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SwapBotsModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SwapBotsModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SwappedBotsModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwappedBotsModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwappedBotsModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bots/flowchart/": {
      "get": {
        "tags": [
          "Bots"
        ],
        "summary": "Gets a paginated list of all the chatbots of type flowchart of one organization. Optionally filtering by a single channel",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "How many items to skip before start taking ones to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "The amount of items to get after the specified offset. Can be more than there are items available, but not more than this route's limit of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Behavior",
            "in": "query",
            "description": "How the query should execute",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaginationBehavior"
                }
              ],
              "default": "GetSliceOnly"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfFlowchartBotModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfFlowchartBotModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfFlowchartBotModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bots"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateFlowchartBotModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateFlowchartBotModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateFlowchartBotModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FlowchartBotModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowchartBotModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowchartBotModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bots/flowchart/{id}/": {
      "put": {
        "tags": [
          "Bots"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EditFlowchartBotModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EditFlowchartBotModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EditFlowchartBotModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FlowchartBotModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowchartBotModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowchartBotModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bots/greeting/": {
      "post": {
        "tags": [
          "Bots"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateGreetingBotModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateGreetingBotModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateGreetingBotModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GreetingBotModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GreetingBotModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GreetingBotModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bots/greeting/{id}/": {
      "put": {
        "tags": [
          "Bots"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EditGreetingBotModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EditGreetingBotModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EditGreetingBotModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GreetingBotModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GreetingBotModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GreetingBotModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bots/sector/": {
      "post": {
        "tags": [
          "Bots"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSectorForwardingBotModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSectorForwardingBotModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSectorForwardingBotModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SectorForwardingBotModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectorForwardingBotModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectorForwardingBotModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bots/sector/{id}/": {
      "put": {
        "tags": [
          "Bots"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EditSectorForwardingBotModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EditSectorForwardingBotModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EditSectorForwardingBotModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SectorForwardingBotModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectorForwardingBotModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectorForwardingBotModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bots/tagging/": {
      "post": {
        "tags": [
          "Bots"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaggingBotModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaggingBotModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTaggingBotModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaggingBotModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaggingBotModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaggingBotModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bots/tagging/{id}/": {
      "put": {
        "tags": [
          "Bots"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EditTaggingBotModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EditTaggingBotModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EditTaggingBotModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TaggingBotModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaggingBotModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaggingBotModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bulk-send-session/": {
      "post": {
        "tags": [
          "BulkSendSession"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateBulkSendSessionModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateBulkSendSessionModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateBulkSendSessionModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BasicBulkSendSessionModel"
                    },
                    {
                      "$ref": "#/components/schemas/BulkSendSessionModel"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BasicBulkSendSessionModel"
                    },
                    {
                      "$ref": "#/components/schemas/BulkSendSessionModel"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BasicBulkSendSessionModel"
                    },
                    {
                      "$ref": "#/components/schemas/BulkSendSessionModel"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "BulkSendSession"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "How many items to skip before start taking ones to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "The amount of items to get after the specified offset. Can be more than there are items available, but not more than this route's limit of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Behavior",
            "in": "query",
            "description": "How the query should execute",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaginationBehavior"
                }
              ],
              "default": "GetSliceOnly"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BulkSendProperty"
                }
              ]
            }
          },
          {
            "name": "Order",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Order"
                }
              ]
            }
          },
          {
            "name": "queryString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfBasicBulkSendSessionModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfBasicBulkSendSessionModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfBasicBulkSendSessionModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bulk-send-session/{id}/": {
      "get": {
        "tags": [
          "BulkSendSession"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkSendSessionModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkSendSessionModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkSendSessionModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/channels/businesstypes/": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Lists all possible BusinessTypes that a Business channel can be created with",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTypeCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTypeCollection"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessTypeCollection"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/channels/{id}/": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get more information of a channel",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the channel",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ChannelModel"
                    },
                    {
                      "$ref": "#/components/schemas/AdminChannelModel"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ChannelModel"
                    },
                    {
                      "$ref": "#/components/schemas/AdminChannelModel"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ChannelModel"
                    },
                    {
                      "$ref": "#/components/schemas/AdminChannelModel"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Channels"
        ],
        "summary": "This route allows editing some informations of an existing channel",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the channel to edit",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateChannelModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateChannelModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateChannelModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ChannelModel"
                    },
                    {
                      "$ref": "#/components/schemas/AdminChannelModel"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ChannelModel"
                    },
                    {
                      "$ref": "#/components/schemas/AdminChannelModel"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ChannelModel"
                    },
                    {
                      "$ref": "#/components/schemas/AdminChannelModel"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Channels"
        ],
        "summary": "Attempts to delete an existing Channel. Note that not all combinations of channel types and states can be deleted by this action. If yours is such case, please contact support",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the channel",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ChannelModel"
                    },
                    {
                      "$ref": "#/components/schemas/AdminChannelModel"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ChannelModel"
                    },
                    {
                      "$ref": "#/components/schemas/AdminChannelModel"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ChannelModel"
                    },
                    {
                      "$ref": "#/components/schemas/AdminChannelModel"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/channels/": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get basic information on all channels of the organization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelReferenceModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelReferenceModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelReferenceModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/channels/starter/": {
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Creates a new Starter channel. This one can be used right away after created, you just need to retrieve its syncronization QRCode with the \"qrcode\" action and scan it.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateStarterChannelModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateStarterChannelModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateStarterChannelModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ChannelModel"
                    },
                    {
                      "$ref": "#/components/schemas/AdminChannelModel"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ChannelModel"
                    },
                    {
                      "$ref": "#/components/schemas/AdminChannelModel"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ChannelModel"
                    },
                    {
                      "$ref": "#/components/schemas/AdminChannelModel"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/channels/waba/": {
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Creates a request for a Business channel. Do note that these cannot be created automatically, you will need to reach out to support with the created Id and follow their instructions to activate the channel.\r\nFor this reason, and the lack of context for each necessary information, it is recommended that you create the channel using our existing form",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateWabaChannelModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateWabaChannelModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateWabaChannelModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ChannelModel"
                    },
                    {
                      "$ref": "#/components/schemas/AdminChannelModel"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ChannelModel"
                    },
                    {
                      "$ref": "#/components/schemas/AdminChannelModel"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ChannelModel"
                    },
                    {
                      "$ref": "#/components/schemas/AdminChannelModel"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/channels/{id}/channelstart/syncmessages/": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Invoking this action creates a background task that attempts to sync older messages of the connected Starter channel from all recent contacts.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Channel",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/channels/{id}/channelstart/syncmessages-contact/": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Invoking this action creates a background task that attempts to sync older messages of the connected Starter channel from a specific contact only.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Channel",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "ContactId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "MessageId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/channels/{id}/channelstart/session/": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Gets the current session.\r\nUse this route with a interval of 5 seconds to get the current status.\r\nStatus property - OFFLINE / READY / CONNECTED\r\nOFFLINE - start the session\r\nREADY - comes with QR Code. If it's empty, it was read successifuly and is connecting. If has QR Code, is ready to be read.\r\nCONNECTED - comes with Phone, Picture, Pushname (from the phone connected) \r\n    and IsDifferentPhoneConnected that's true if the phone connected is differente from the channel and the session is stoped \r\n    and the process restart.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Channel id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "keepOffline",
            "in": "query",
            "description": "Optional parameters in case you don't want to start the session if it's offline",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelStartSessionModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelStartSessionModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelStartSessionModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/channels/{id}/channelstart/restartsession/": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Restart the process to connect to a channel.\r\nConsists in reset the QR Code generation if its active \r\n(routes {id}/channelstart/qrcode and {id}/channelstart/session are returning QR Code), stop and start again the session.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Channel id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "resetQRCode",
            "in": "query",
            "description": "If QR Code is generated, its necessary to reset it",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/channels/{id}/channelstart/qrcode/": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Gets the QR Code to be read.\r\nThe QR Code is generated time to time for security reasons.\r\nUse this route with a interval of 2 seconds to get the current QR Code.\r\nIf the QR Code was read successfuly, the return property will be empty.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Channel id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelStartQRCodeModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelStartQRCodeModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelStartQRCodeModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chat-filter/": {
      "get": {
        "tags": [
          "ChatFilter"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatFilterModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatFilterModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatFilterModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ChatFilter"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateChatFilterModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateChatFilterModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateChatFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFilterModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFilterModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFilterModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chat-filter/{id}/": {
      "delete": {
        "tags": [
          "ChatFilter"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFilterModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFilterModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatFilterModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chats/": {
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "Gets basic info of all chats",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "Sectors.Rule",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilterRules"
                }
              ]
            }
          },
          {
            "name": "Sectors.Values",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "AB_12-xyzEXAMPLE"
              }
            }
          },
          {
            "name": "PhoneNumbers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Searchtext",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RelativeStartFromEventUTC",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "RelativeTakeDirection",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TakeDirection"
                }
              ]
            }
          },
          {
            "name": "Type",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilterTypes"
                }
              ]
            }
          },
          {
            "name": "ChatState",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ChatState"
                }
              ],
              "default": "Open"
            }
          },
          {
            "name": "LastMessage",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LastMessage"
                }
              ],
              "default": "All"
            }
          },
          {
            "name": "Order",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Order"
                }
              ],
              "default": "Desc"
            }
          },
          {
            "name": "Tags.Rule",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilterRules"
                }
              ]
            }
          },
          {
            "name": "Tags.Values",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "AB_12-xyzEXAMPLE"
              }
            }
          },
          {
            "name": "Members.Rule",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilterRules"
                }
              ]
            }
          },
          {
            "name": "Members.Values",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "AB_12-xyzEXAMPLE"
              }
            }
          },
          {
            "name": "Channels.Rule",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilterRules"
                }
              ]
            }
          },
          {
            "name": "Channels.Values",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "AB_12-xyzEXAMPLE"
              }
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "How many items to skip before start taking ones to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "The amount of items to get after the specified offset. Can be more than there are items available, but not more than this route's limit of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Behavior",
            "in": "query",
            "description": "How the query should execute",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaginationBehavior"
                }
              ],
              "default": "GetSliceOnly"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfBasicChatModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfBasicChatModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfBasicChatModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Chats"
        ],
        "summary": "Creates a new chat for a contact in a channel. If there's already a chat open with this contact and this channel, it will be returned and nothing will be created",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateChatModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateChatModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateChatModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chats/{id}/": {
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "Gets all the details of a single chat",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the chat to get",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "includeMessages",
            "in": "query",
            "description": "How many messages to include in the LatestMessages array",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Chats"
        ],
        "summary": "Allows updating bunch of options and states of a chat, like closing, marking as private, assigning it to another member and/or sector etc.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the chat to update",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateChatModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateChatModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateChatModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chats/{chatId}/relative-messages/": {
      "get": {
        "tags": [
          "Chats"
        ],
        "summary": "Gets messages from anywhere in a chat based in the desired start date",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "chatId",
            "in": "path",
            "description": "Id of the chat to search the messages in",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "FromEventUTC",
            "in": "query",
            "description": "Starting point to get the messages",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "How many messages to take after or before the specified date",
            "required": true,
            "schema": {
              "maximum": 250,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Direction",
            "in": "query",
            "description": "In which direction to get the messages from the start date",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TakeDirection"
                }
              ],
              "default": "TakeBefore"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelativeMessagesResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelativeMessagesResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelativeMessagesResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chats/{id}/unread/": {
      "put": {
        "tags": [
          "Chats"
        ],
        "summary": "Marks the desired chat as having its last message with an Unread state. Chat must have at least one message for it to work.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the chat to mark as unread",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chats/{id}/org-member/": {
      "put": {
        "tags": [
          "Chats"
        ],
        "summary": "Modifies the chat's OrganizationMember. If null, remove it.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the chat to update",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChangeMemberModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChangeMemberModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChangeMemberModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chats/start-bot/": {
      "post": {
        "tags": [
          "Chats"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChatbotModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChatbotModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChatbotModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chats/{id}/tags/": {
      "post": {
        "tags": [
          "ChatTags"
        ],
        "summary": "Adds a tag to an existing chat. This entire feature supposed to be removed in the near future and replaced only with the contact's tags",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttachTagModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttachTagModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttachTagModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chats/{id}/tags/{tagId}/": {
      "delete": {
        "tags": [
          "ChatTags"
        ],
        "summary": "Removes a tag of an existing chat. This entire feature supposed to be removed in the near future and replaced only with the contact's tags",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "tagId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contacts/{id}/chats/": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Gets a paginated list of current and past chats that belong to the selected contact",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the contact to get the chats from",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "Tags.Rule",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilterRules"
                }
              ]
            }
          },
          {
            "name": "Tags.Values",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "AB_12-xyzEXAMPLE"
              }
            }
          },
          {
            "name": "Members.Rule",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilterRules"
                }
              ]
            }
          },
          {
            "name": "Members.Values",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "AB_12-xyzEXAMPLE"
              }
            }
          },
          {
            "name": "Channels.Rule",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilterRules"
                }
              ]
            }
          },
          {
            "name": "Channels.Values",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "AB_12-xyzEXAMPLE"
              }
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "How many items to skip before start taking ones to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "The amount of items to get after the specified offset. Can be more than there are items available, but not more than this route's limit of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Behavior",
            "in": "query",
            "description": "How the query should execute",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaginationBehavior"
                }
              ],
              "default": "GetSliceOnly"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfBasicChatModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfBasicChatModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfBasicChatModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contacts/": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Gets a paginated list of all contacts in the organization, with optional filters",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "How many items to skip before start taking ones to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "The amount of items to get after the specified offset. Can be more than there are items available, but not more than this route's limit of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Behavior",
            "in": "query",
            "description": "How the query should execute",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaginationBehavior"
                }
              ],
              "default": "GetSliceOnly"
            }
          },
          {
            "name": "QueryString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags.Rule",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FilterRules"
                }
              ]
            }
          },
          {
            "name": "Tags.Values",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "AB_12-xyzEXAMPLE"
              }
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ContactProperty"
                }
              ]
            }
          },
          {
            "name": "Order",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Order"
                }
              ]
            }
          },
          {
            "name": "includeGroups",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfSimpleContactModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfSimpleContactModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfSimpleContactModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Creates a new contact in the selected organization.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateContactModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateContactModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateContactModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContactSaveModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactSaveModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactSaveModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contacts/exportlink/": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Creates a link that when accessed starts downloading an export of the organization's contacts.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ExportType"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExportContactsLinkResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportContactsLinkResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportContactsLinkResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contacts/{id}/": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Gets all details of a single contact",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the contact",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Allows to update some information associated to an existing contact",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the contact to update",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateContactModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateContactModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateContactModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes a contact. You have the option of either closing their open chats or deleting all of them.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the contact to delete",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "chatAction",
            "in": "query",
            "description": "What to do with this contact's chats",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DeleteContactChatAction"
                }
              ],
              "default": "Close"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contacts/{id}/profile/": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Gets the most basic information about the contact",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SimpleContactModel"
                    },
                    {
                      "$ref": "#/components/schemas/ContactModel"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SimpleContactModel"
                    },
                    {
                      "$ref": "#/components/schemas/ContactModel"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SimpleContactModel"
                    },
                    {
                      "$ref": "#/components/schemas/ContactModel"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contacts/phone/": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Gets a contact by its phone number",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "phoneNumber",
            "in": "query",
            "description": "The phone number to search",
            "required": true,
            "schema": {
              "pattern": "^\\+[1-9]\\d{1,14}$",
              "type": "string",
              "description": "A phone number in the E.164 standard",
              "example": "+5511987654321"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contacts/{id}/notes/": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get all notes from a contact.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the contact to add the note to",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteModel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Allows adding a note to an existing contact that can be retrieved later in the full GET method.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the contact to add the note to",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateNoteModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateNoteModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateNoteModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contacts/{id}/notes/{noteId}/": {
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes a note attached to a contact by its Id",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the contact that contains the note",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "description": "The Id of the note to delete",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contacts/{id}/blocked/": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates the blocked status of a contact. A blocked contact cannot send messages to your organization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the user to block or unblock",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "isBlocked",
            "in": "query",
            "description": "Sets the desired block state",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/contacts/{id}/tags/": {
      "post": {
        "tags": [
          "ContactTags"
        ],
        "summary": "Adds a tag to a contact. The list of tags can later be retrieved using the contact's GET action.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the Contact to update",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttachTagModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttachTagModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttachTagModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ContactTags"
        ],
        "summary": "Removes a tag from a contact.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the contact",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "tagId",
            "in": "query",
            "description": "The Id of the tag",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/members/me/": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "This action returns all the information about you, the logged in user. It also includes the list of organizations you're a part of.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMemberModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMemberModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMemberModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Updates information about yourself.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOrganizationMemberModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOrganizationMemberModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOrganizationMemberModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMemberModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMemberModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMemberModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/members/me/profilepicture/": {
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Allows to update your own profile picture",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "image"
                ],
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "image": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "uri",
                  "example": "https://example.com"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uri",
                  "example": "https://example.com"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "uri",
                  "example": "https://example.com"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/members/me/status-activity/": {
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Allows to update you current status",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The new status",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StatusActivity"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMemberStatusModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMemberStatusModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMemberStatusModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/members/{id}/activation-status/": {
      "put": {
        "tags": [
          "Members"
        ],
        "summary": "Allows to update the activation status (active, disabled) of a user in an organization.\r\nIf you're an Admin in the selected organization, you can enable or disable any user in that organization.\r\nIf your permission is below Admin, you're only allowed to disable yourself.\r\nWhen deactivating someone, it is possible to choose whether or not to close all conversations with this attendant.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the user to update the activation status",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOrganizationMemberStatusModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOrganizationMemberStatusModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOrganizationMemberStatusModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMemberActivationStatusModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMemberActivationStatusModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMemberActivationStatusModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/messages/{id}/": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Gets all the information about a single message",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the message",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Messages"
        ],
        "summary": "Attempts to delete a message. Depending on the type of channel and the desired \"deleteForEveryone\" behavior, these things might happen:\r\n1. The message needs to be deleted only in out database and is deleted immediately within this action. (Business channel, delete for me).\r\n2. The message cannot be deleted because the remote locations where the message should also be deleted no longer accept to be deleted because of time restraints (Starter channel, delete for everyone).\r\n3. The remote location where the message should also be deleted does not allow messages to deleted at all (Business channel, delete for everyone).\r\n4. The message can be deleted in the remote location, but the only thing the action does is request it. Deletion from our database only happens when we receive a confirmation that the message was actually deleted (Starter channel, delete for me or everyone).",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The message to delete",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "deleteForEveryone",
            "in": "query",
            "description": "Attempts to delete for everyone in the chat if true. Attempts to delete just for ourselves when false.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/messages/{id}/states/": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Gets a list of all the states a message had at every point in time",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the message",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageStatesModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageStatesModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageStatesModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/messages/": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Post a message to a chat",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageModel"
              }
            },
            "multipart/form-data": {
              "schema": {
                "required": [
                  "ChatId",
                  "OrganizationId"
                ],
                "type": "object",
                "properties": {
                  "TempId": {
                    "type": "string",
                    "description": "An Id generated by the client that is passed along when the message is comitted to the database and has the true id. Not necessary for fire-and-forget situations",
                    "default": null
                  },
                  "File": {
                    "type": "string",
                    "format": "binary",
                    "default": null
                  },
                  "Prefix": {
                    "type": "string",
                    "description": "A prefix to be concatenated with the message. Used by the app to include the operator name. Not required",
                    "default": null
                  },
                  "Message": {
                    "maxLength": 2000,
                    "type": "string",
                    "description": "The message to send",
                    "default": "Ol�!"
                  },
                  "ChatId": {
                    "type": "string",
                    "description": "The Id of the chat to send the message to. Must exist and be open",
                    "example": "AB_12-xyzEXAMPLE"
                  },
                  "IsPrivate": {
                    "type": "boolean",
                    "description": "Private messages are not sent to the contact, they function like an internal annotation",
                    "default": false
                  },
                  "PreviousMessageId": {
                    "type": "string",
                    "description": "Used by the app to ensure messages are sent in order. Not necessary",
                    "example": "AB_12-xyzEXAMPLE"
                  },
                  "StickUrl": {
                    "type": "string",
                    "description": "If the message you're sendind is a sticker, here you put its URL",
                    "format": "uri",
                    "example": "https://example.com"
                  },
                  "ReplyToMessageId": {
                    "type": "string",
                    "description": "When the message you're sending is a reply to another message, use the other message's Id here",
                    "example": "AB_12-xyzEXAMPLE"
                  },
                  "SkipReassign": {
                    "type": "boolean",
                    "description": "When true, will skip the step of reassigning the conversation to the user who sent the message",
                    "default": false
                  },
                  "OrganizationId": {
                    "type": "string",
                    "example": "AB_12-xyzEXAMPLE"
                  }
                }
              },
              "encoding": {
                "TempId": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                },
                "Prefix": {
                  "style": "form"
                },
                "Message": {
                  "style": "form"
                },
                "ChatId": {
                  "style": "form"
                },
                "IsPrivate": {
                  "style": "form"
                },
                "PreviousMessageId": {
                  "style": "form"
                },
                "StickUrl": {
                  "style": "form"
                },
                "ReplyToMessageId": {
                  "style": "form"
                },
                "SkipReassign": {
                  "style": "form"
                },
                "OrganizationId": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/messages/{id}/forward/": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Forwards a message into another chat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the message to be forwarded",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ForwardMessageModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ForwardMessageModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ForwardMessageModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/messages/simplified/": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Simplified version of the regular POST action. Does not require to create the contact and open the chat beforehand. But it is not only simplified, it's also somewhat more limited. If you require a functionality this action does not provide, the main action must be used instead.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageSimplifiedModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageSimplifiedModel"
              }
            },
            "multipart/form-data": {
              "schema": {
                "required": [
                  "FromPhone",
                  "OrganizationId",
                  "ToPhone"
                ],
                "type": "object",
                "properties": {
                  "ToPhone": {
                    "pattern": "^\\+[1-9]\\d{1,14}$",
                    "type": "string",
                    "description": "A phone number in the E.164 standard",
                    "example": "+5511987654321"
                  },
                  "FromPhone": {
                    "pattern": "^\\+[1-9]\\d{1,14}$",
                    "type": "string",
                    "description": "A phone number in the E.164 standard",
                    "example": "+5511987654321"
                  },
                  "OrganizationId": {
                    "type": "string",
                    "example": "AB_12-xyzEXAMPLE"
                  },
                  "Message": {
                    "maxLength": 2000,
                    "type": "string",
                    "default": "Ol�!"
                  },
                  "File": {
                    "type": "string",
                    "format": "binary",
                    "default": null
                  },
                  "SkipReassign": {
                    "type": "boolean",
                    "description": "When true, will skip the step of reassigning the conversation to the user who sent the message",
                    "default": false
                  }
                }
              },
              "encoding": {
                "ToPhone": {
                  "style": "form"
                },
                "FromPhone": {
                  "style": "form"
                },
                "OrganizationId": {
                  "style": "form"
                },
                "Message": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                },
                "SkipReassign": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/messages/{id}/resend/": {
      "put": {
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organization-invites/": {
      "get": {
        "tags": [
          "OrganizationInvites"
        ],
        "summary": "Gets a list of invitations that were sent by the selected organization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationInviteModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationInviteModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationInviteModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "OrganizationInvites"
        ],
        "summary": "Creates a new invitation and sends it to the detined e-mail address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SendOrganizationInviteModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SendOrganizationInviteModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SendOrganizationInviteModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInviteModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInviteModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInviteModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organization-invites/{email}/": {
      "get": {
        "tags": [
          "OrganizationInvites"
        ],
        "summary": "Gets additional information about a single pending invitation of the supplied e-mail address",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "email",
            "in": "path",
            "description": "The e-mail to search an invite with",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInviteModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInviteModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInviteModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "OrganizationInvites"
        ],
        "summary": "Cancels an invitation",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "email",
            "in": "path",
            "description": "The invited e-mail address to cancel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInviteModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInviteModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInviteModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organization-invites/{email}/resend/": {
      "put": {
        "tags": [
          "OrganizationInvites"
        ],
        "summary": "Resets the invitation. Generates a new link and sends it again to the destined email address.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "email",
            "in": "path",
            "description": "The invitation to resend",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInviteModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInviteModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInviteModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organizations/{organizationId}/preferences/": {
      "put": {
        "tags": [
          "OrganizationPreferences"
        ],
        "summary": "Allows to update organization-level preferences",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOrganizationPreferencesModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOrganizationPreferencesModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOrganizationPreferencesModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationPreferencesDetailsModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationPreferencesDetailsModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationPreferencesDetailsModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organizations/{id}/": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Gets information about an organization you're a part of that are essential for other actions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SimpleOrganizationModel"
                    },
                    {
                      "$ref": "#/components/schemas/FullOrganizationDetailsModel"
                    },
                    {
                      "$ref": "#/components/schemas/UmblerOrganizationModel"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SimpleOrganizationModel"
                    },
                    {
                      "$ref": "#/components/schemas/FullOrganizationDetailsModel"
                    },
                    {
                      "$ref": "#/components/schemas/UmblerOrganizationModel"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SimpleOrganizationModel"
                    },
                    {
                      "$ref": "#/components/schemas/FullOrganizationDetailsModel"
                    },
                    {
                      "$ref": "#/components/schemas/UmblerOrganizationModel"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Organizations"
        ],
        "summary": "Updates information about an organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOrganizationModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOrganizationModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateOrganizationModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDetailsModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDetailsModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDetailsModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "Deletes an organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/FullOrganizationDetailsModel"
                    },
                    {
                      "$ref": "#/components/schemas/UmblerOrganizationModel"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/FullOrganizationDetailsModel"
                    },
                    {
                      "$ref": "#/components/schemas/UmblerOrganizationModel"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/FullOrganizationDetailsModel"
                    },
                    {
                      "$ref": "#/components/schemas/UmblerOrganizationModel"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organizations/{id}/details/": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Gets profile information about an organization you're a part of",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDetailsModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDetailsModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDetailsModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organizations/{id}/conversation-window-limits/": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Gets information about the organization current conversation windows limits",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationWindowModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationWindowModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationWindowModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organizations/{id}/business-chat-limits/": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationWindowModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationWindowModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationWindowModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/organizations/{id}/picture/": {
      "put": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update the picture of an organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "image"
                ],
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "image": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDetailsModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDetailsModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDetailsModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/permissions/": {
      "put": {
        "tags": [
          "Permissions"
        ],
        "summary": "Update permissions of an existing member",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePermissionOrganizationMemberModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePermissionOrganizationMemberModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdatePermissionOrganizationMemberModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionOrganizationMemberModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionOrganizationMemberModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionOrganizationMemberModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/permissions/organization-member/": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Gets the current permissions of an existing member",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "memberId",
            "in": "query",
            "description": "The Id of the member",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermissionsModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermissionsModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermissionsModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/quick-answers/": {
      "get": {
        "tags": [
          "QuickAnswers"
        ],
        "summary": "Gets a paginated list of all quick answers in the organization that are viewable by you. With filtering options also",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "How many items to skip before start taking ones to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "The amount of items to get after the specified offset. Can be more than there are items available, but not more than this route's limit of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Behavior",
            "in": "query",
            "description": "How the query should execute",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaginationBehavior"
                }
              ],
              "default": "GetSliceOnly"
            }
          },
          {
            "name": "queryString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/QuickAnswersProperty"
                }
              ]
            }
          },
          {
            "name": "Order",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Order"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfSimpleQuickAnswerModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfSimpleQuickAnswerModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfSimpleQuickAnswerModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "QuickAnswers"
        ],
        "summary": "Create a new quick answer for yourself or the organization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateQuickAnswerModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateQuickAnswerModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateQuickAnswerModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuickAnswerModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuickAnswerModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuickAnswerModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/quick-answers/{id}/": {
      "get": {
        "tags": [
          "QuickAnswers"
        ],
        "summary": "Gets additional information about a single quick answer",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The quick answer Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuickAnswerModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuickAnswerModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuickAnswerModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "QuickAnswers"
        ],
        "summary": "Updates an existing quick answer",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the quick answer",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateQuickAnswerModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateQuickAnswerModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateQuickAnswerModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuickAnswerModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuickAnswerModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuickAnswerModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "QuickAnswers"
        ],
        "summary": "Deletes an existing quick answer",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the quick answer",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QuickAnswerModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuickAnswerModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuickAnswerModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/chats/": {
      "get": {
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ChannelId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "MemberId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportChartModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportChartModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportChartModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/chats-opened/": {
      "get": {
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReportChartCountModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportChartCountModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportChartCountModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/chats-waiting/": {
      "get": {
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReportChartCountModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportChartCountModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportChartCountModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/chats-first-response-time/": {
      "get": {
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ChannelId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "MemberId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportChartModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportChartModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportChartModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/chats-time-to-close/": {
      "get": {
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ChannelId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "MemberId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportChartModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportChartModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportChartModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/chats-regions/": {
      "get": {
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ChannelId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "MemberId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegionChartModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegionChartModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegionChartModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/chats-members/": {
      "get": {
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ChannelId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "MemberId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportOrganizationMemberModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportOrganizationMemberModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportOrganizationMemberModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/chats-sectors/": {
      "get": {
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ChannelId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "MemberId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportSectorModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportSectorModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportSectorModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/chats-tags/": {
      "get": {
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ChannelId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "MemberId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportTagModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportTagModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportTagModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/chats-contact-most-chats/": {
      "get": {
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ChannelId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "MemberId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportContactMostChatModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportContactMostChatModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportContactMostChatModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/organization-conversations-window/": {
      "get": {
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "The only considered values of this property are Month and Year.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "The only considered values of this property are Month and Year.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "SearchType",
            "in": "query",
            "description": "Determine the type of conversations desired.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ReportConversationsWindowSearchType"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReportOrganizationConversationsWindowModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportOrganizationConversationsWindowModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportOrganizationConversationsWindowModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/channel-conversations-window/": {
      "get": {
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "ChannelId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "The only considered values of this property are Month and Year.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "The only considered values of this property are Month and Year.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "SearchType",
            "in": "query",
            "description": "Determine the type of conversations desired.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ReportConversationsWindowSearchType"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReportChannelConversationsWindowModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportChannelConversationsWindowModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportChannelConversationsWindowModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/contacts-conversations-window/": {
      "get": {
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "ChannelId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "description": "The only considered values of this property are Day, Month and Year.\r\nThe day is set for the first day of the month.\r\nThe hour is set for the first hour of the day.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "The only considered values of this property are Day, Month and Year.\r\nThe day is set for the next day in order to find conversation opened during the day searched.\r\nThe hour is set for the last hour of the day.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "SearchType",
            "in": "query",
            "description": "Determine the type of conversations desired.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ReportConversationsWindowSearchType"
                }
              ]
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "How many items to skip before start taking ones to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "The amount of items to get after the specified offset. Can be more than there are items available, but not more than this route's limit of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Behavior",
            "in": "query",
            "description": "How the query should execute",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaginationBehavior"
                }
              ],
              "default": "GetSliceOnly"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfReportsContactsConversationWindowModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfReportsContactsConversationWindowModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfReportsContactsConversationWindowModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/reports/organization-exceeded-conversations-window/": {
      "get": {
        "tags": [
          "Reports"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReportOrganizationExceededConversationsWindowModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportOrganizationExceededConversationsWindowModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportOrganizationExceededConversationsWindowModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/scheduled-messages/{id}/": {
      "get": {
        "tags": [
          "ScheduledMessages"
        ],
        "summary": "Gets additional information about a single scheduled message",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The scheduled message Id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledMessageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledMessageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledMessageModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ScheduledMessages"
        ],
        "summary": "Updates the details of an existing scheduled message",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The scheduled message to update",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateScheduledMessageModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateScheduledMessageModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateScheduledMessageModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledMessageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledMessageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledMessageModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ScheduledMessages"
        ],
        "summary": "Cancels an existing scheduled message",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the scheduled message to cancel",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/scheduled-messages/": {
      "get": {
        "tags": [
          "ScheduledMessages"
        ],
        "summary": "Gets a paginated list of scheduled messages meant to a single contact",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "The contact to retrieve the scheduled messages from",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "How many items to skip before start taking ones to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "The amount of items to get after the specified offset. Can be more than there are items available, but not more than this route's limit of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Behavior",
            "in": "query",
            "description": "How the query should execute",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaginationBehavior"
                }
              ],
              "default": "GetSliceOnly"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfScheduledMessageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfScheduledMessageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfScheduledMessageModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ScheduledMessages"
        ],
        "summary": "Creates a new scheduled message",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateScheduledMessageModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateScheduledMessageModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateScheduledMessageModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledMessageModelBus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledMessageModelBus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledMessageModelBus"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sectors/": {
      "get": {
        "tags": [
          "Sectors"
        ],
        "summary": "Gets all the sectors of the selected organization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SectorReferenceModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SectorReferenceModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SectorReferenceModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Sectors"
        ],
        "summary": "Creates a new sector in the organization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSectorModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSectorModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSectorModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SectorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectorModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sectors/{id}/": {
      "get": {
        "tags": [
          "Sectors"
        ],
        "summary": "Gets more details of a single sector",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the sector",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SectorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectorModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sectors"
        ],
        "summary": "Updates the details of an existing sector",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the sector",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateSectorModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateSectorModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateSectorModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SectorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectorModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sectors"
        ],
        "summary": "Delete an existing sector, moving its chats to another sector first",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the sector",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "moveChatsToSector",
            "in": "query",
            "description": "The sector the chats in the current sector must be move to",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SectorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectorModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sectors/{id}/order/": {
      "put": {
        "tags": [
          "Sectors"
        ],
        "summary": "Updates the ordering of a sector",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the sector",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateSectorOrderModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateSectorOrderModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateSectorOrderModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SectorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectorModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/stickers/": {
      "get": {
        "tags": [
          "Stickers"
        ],
        "summary": "Gets a paginated list of all the stickers the organization saved previously",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "How many items to skip before start taking ones to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "The amount of items to get after the specified offset. Can be more than there are items available, but not more than this route's limit of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Behavior",
            "in": "query",
            "description": "How the query should execute",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaginationBehavior"
                }
              ],
              "default": "GetSliceOnly"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfStickerModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfStickerModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfStickerModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Stickers"
        ],
        "summary": "Add a sticker to the organization's sticker repository",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateStickerModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateStickerModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateStickerModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StickerModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StickerModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StickerModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Stickers"
        ],
        "summary": "Remove a sticker from the organization's sticker repository",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "The sticker url to remove",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri",
              "example": "https://example.com"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StickerModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StickerModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StickerModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/stickers/existing/": {
      "get": {
        "tags": [
          "Stickers"
        ],
        "summary": "Attempts to find a previously saved sticker by its image's URL",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "stickUrl",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri",
              "example": "https://example.com"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StickerModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StickerModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StickerModel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tags/{id}/": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Gets additional information about a tag by its Id",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the tag",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Updates an existing tag",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the tag",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTagModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTagModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTagModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Deletes a tag from the organization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the tag",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tags/": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Gets a paginated list of tags created in the organization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "How many items to skip before start taking ones to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "The amount of items to get after the specified offset. Can be more than there are items available, but not more than this route's limit of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Behavior",
            "in": "query",
            "description": "How the query should execute",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaginationBehavior"
                }
              ],
              "default": "GetSliceOnly"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TagProperty"
                }
              ]
            }
          },
          {
            "name": "Order",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Order"
                }
              ]
            }
          },
          {
            "name": "queryString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfTagModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfTagModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfTagModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Creates a new tag in the organization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTagModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTagModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTagModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tags/{id}/order/": {
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Updates the ordering of an existing tag",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the tag",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTagOrderModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTagOrderModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTagOrderModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/template-categories/": {
      "get": {
        "tags": [
          "TemplateCategories"
        ],
        "summary": "Lists all categories a template can be created with. Note that some are marked as deprecated, those are shown for compatibility reasons only. They're not allowed to be used anymore.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateCategoryModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateCategoryModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateCategoryModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/template-messages/": {
      "post": {
        "tags": [
          "TemplateMessages"
        ],
        "summary": "Sends a template message to an existing chat",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateMessageModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateMessageModel"
              }
            },
            "multipart/form-data": {
              "schema": {
                "required": [
                  "ChatId",
                  "OrganizationId",
                  "TemplateId"
                ],
                "type": "object",
                "properties": {
                  "TemplateId": {
                    "type": "string",
                    "example": "AB_12-xyzEXAMPLE"
                  },
                  "ChatId": {
                    "type": "string",
                    "example": "AB_12-xyzEXAMPLE"
                  },
                  "Params": {
                    "maxLength": 40,
                    "minLength": 1,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "OrganizationId": {
                    "type": "string",
                    "example": "AB_12-xyzEXAMPLE"
                  },
                  "SkipReassign": {
                    "type": "boolean",
                    "description": "When true, will skip the step of reassigning the conversation to the user who sent the message",
                    "default": false
                  },
                  "BulkSession": {
                    "type": "string",
                    "description": "Used to group messages by a bulk send session",
                    "example": "AB_12-xyzEXAMPLE"
                  },
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "TemplateId": {
                  "style": "form"
                },
                "ChatId": {
                  "style": "form"
                },
                "Params": {
                  "style": "form"
                },
                "OrganizationId": {
                  "style": "form"
                },
                "SkipReassign": {
                  "style": "form"
                },
                "BulkSession": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/template-messages/simplified/": {
      "post": {
        "tags": [
          "TemplateMessages"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateMessageSimplifiedModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateMessageSimplifiedModel"
              }
            },
            "multipart/form-data": {
              "schema": {
                "required": [
                  "FromPhone",
                  "OrganizationId",
                  "TemplateId",
                  "ToPhone"
                ],
                "type": "object",
                "properties": {
                  "ToPhone": {
                    "pattern": "^\\+[1-9]\\d{1,14}$",
                    "type": "string",
                    "description": "A phone number in the E.164 standard",
                    "example": "+5511987654321"
                  },
                  "FromPhone": {
                    "pattern": "^\\+[1-9]\\d{1,14}$",
                    "type": "string",
                    "description": "A phone number in the E.164 standard",
                    "example": "+5511987654321"
                  },
                  "TemplateId": {
                    "type": "string",
                    "example": "AB_12-xyzEXAMPLE"
                  },
                  "Params": {
                    "maxLength": 40,
                    "minLength": 1,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "OrganizationId": {
                    "type": "string",
                    "example": "AB_12-xyzEXAMPLE"
                  },
                  "SkipReassign": {
                    "type": "boolean",
                    "description": "When true, will skip the step of reassigning the conversation to the user who sent the message",
                    "default": false
                  },
                  "BulkSession": {
                    "type": "string",
                    "description": "Used to group messages by a bulk send session",
                    "example": "AB_12-xyzEXAMPLE"
                  },
                  "File": {
                    "type": "string",
                    "format": "binary",
                    "default": null
                  }
                }
              },
              "encoding": {
                "ToPhone": {
                  "style": "form"
                },
                "FromPhone": {
                  "style": "form"
                },
                "TemplateId": {
                  "style": "form"
                },
                "Params": {
                  "style": "form"
                },
                "OrganizationId": {
                  "style": "form"
                },
                "SkipReassign": {
                  "style": "form"
                },
                "BulkSession": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/templates/": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Gets a paginated list of all the message templates from an organization. Optionally filtering by a single channel within the organization and/or their statuses.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "How many items to skip before start taking ones to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "The amount of items to get after the specified offset. Can be more than there are items available, but not more than this route's limit of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Behavior",
            "in": "query",
            "description": "How the query should execute",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaginationBehavior"
                }
              ],
              "default": "GetSliceOnly"
            }
          },
          {
            "name": "queryString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TemplateProperty"
                }
              ]
            }
          },
          {
            "name": "Order",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Order"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfSimpleTemplateModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfSimpleTemplateModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfSimpleTemplateModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Templates"
        ],
        "summary": "Creates and submits a new template for Meta's approval",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTemplateModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTemplateModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateTemplateModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Templates"
        ],
        "summary": "Updates template. You can only update information that is not dependent on Gupshup.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTemplateModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTemplateModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTemplateModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/templates/{id}/": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Gets additional information about a template by its Id",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the template",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Templates"
        ],
        "summary": "Deletes an existing template. Note that it's also deleted in your meta account",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the template",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/templates/media/": {
      "put": {
        "tags": [
          "Templates"
        ],
        "summary": "Uploads a sample media to be used in a template. The returned ID must be used to create the template itself.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "ChannelId",
                  "File"
                ],
                "type": "object",
                "properties": {
                  "ChannelId": {
                    "type": "string",
                    "example": "AB_12-xyzEXAMPLE"
                  },
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "ChannelId": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateMediaModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateMediaModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateMediaModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user-notifications/": {
      "get": {
        "tags": [
          "UserNotifications"
        ],
        "summary": "Gets a paginated list of notifications for the current user",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "How many items to skip before start taking ones to return",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "The amount of items to get after the specified offset. Can be more than there are items available, but not more than this route's limit of items per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Behavior",
            "in": "query",
            "description": "How the query should execute",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaginationBehavior"
                }
              ],
              "default": "GetSliceOnly"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfUserNotificationModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfUserNotificationModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationOfUserNotificationModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user-notifications/{id}/": {
      "put": {
        "tags": [
          "UserNotifications"
        ],
        "summary": "Marks a notification as read",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the notification",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotificationModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotificationModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotificationModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/webhooks/": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Gets a list of webhooks registered in the desired organization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "Optionally you can pass a channel Id to retrieve only webhooks registered in it",
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Optionally, you can pass a query string to filter webhooks' names",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookModel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Creates a new webhook registration. After successfully created, it may take a few seconds for the desired URL to start receiving new events.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateWebhookModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateWebhookModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateWebhookModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/webhooks/{id}/": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Gets all available information of a single webhook",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the registered webhook",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Allows editing information and behavior of an existing webhook registration.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the webhook to edit",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateWebhookModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateWebhookModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateWebhookModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Deletes a webhook registration. After successfully deleted, it may take a few seconds for the desired URL start to stop receiving events.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "The Id of the organization. A list of all your organizations can be retrieved using the GET /v1/members/me route. A valid id can look like this: YiwUPDF2zFWaRG01",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the webhook registration to disable and delete",
            "required": true,
            "schema": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              }
            }
          },
          "404": {
            "description": "An object with the sent identifier could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SerializedErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/v1/webhooks/ranges/": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Lists all IP ranges we can send Webhooks from",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SourceRanges"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceRanges"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceRanges"
                }
              }
            }
          },
          "500": {
            "description": "When an unexpected internal server error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorBasicDetails"
                }
              }
            }
          },
          "400": {
            "description": "Will return a BadRequest if a property has an invalid value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActivityLogModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "organizationId": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "url": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "controller": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "method": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "details": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "referenceId": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "uTalkUserId": {
            "type": "string",
            "readOnly": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "activityLogType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActivityLogType"
              }
            ],
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ActivityLogSimpleModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "organizationId": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "referenceId": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "uTalkUserId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "activityLogType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActivityLogType"
              }
            ]
          },
          "details": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActivityLogType": {
        "enum": [
          "Generic",
          "ChatTransfered",
          "ContactCreated",
          "ContactUpdated",
          "ContactDeleted",
          "ChatCreated",
          "ChatClosed",
          "ChatSectorUpdate",
          "ChatPrivated",
          "ChatPublic",
          "PermissionUpdated",
          "MessageTemplateCreated",
          "MessageTemplateUpdated",
          "MessageTemplateDeleted",
          "TagCreated",
          "TagUpdated",
          "TagDeleted",
          "BotCreated",
          "BotUpdated",
          "BotDeleted",
          "InviteCreated",
          "InviteUpdated",
          "InviteDeleted",
          "WebhookCreated",
          "WebhookUpdated",
          "WebhookDeleted",
          "SectorCreated",
          "SectorUpdated",
          "SectorDeleted",
          "QuickAnswerCreated",
          "QuickAnswerUpdated",
          "QuickAnswerDeleted",
          "ScheduledMessageCreated",
          "ScheduledMessageDeleted",
          "ScheduledMessageUpdated",
          "ScheduledMessageSent",
          "ContractPendence",
          "BotPaused",
          "BotResumed",
          "ScheduledMessageError",
          "ChannelCreated",
          "PaymentReceived",
          "MarketingNotification",
          "SinglePackageBought",
          "SinglePackageBoughtDiscount",
          "ConversationWindowWarning"
        ],
        "type": "string"
      },
      "ActivityReferenceId": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "additionalProperties": false
      },
      "AddressModel": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string",
            "nullable": true
          },
          "addressLine2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdminChannelModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ChannelModel"
          }
        ],
        "properties": {
          "metaTier": {
            "type": "string",
            "nullable": true
          },
          "phoneType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneType"
              }
            ],
            "nullable": true
          },
          "wabaStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumberWabaStatus"
              }
            ],
            "nullable": true
          },
          "facebookPageUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          },
          "currentBSPId": {
            "type": "string",
            "nullable": true
          },
          "appId": {
            "type": "string"
          },
          "businessManagerId": {
            "type": "string",
            "nullable": true
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelPlatform"
              }
            ],
            "nullable": true
          },
          "cluster": {
            "type": "string",
            "nullable": true
          },
          "deletedAtUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AttachTagModel": {
        "required": [
          "organizationId",
          "tagId"
        ],
        "type": "object",
        "properties": {
          "tagId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "BasicBulkSendSessionModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "initiatedBy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UTalkUserIdReferenceModel"
              }
            ]
          },
          "messagesSent": {
            "type": "integer",
            "format": "int32"
          },
          "channel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelReferenceIdModel"
              }
            ]
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "BasicBulkSendSessionModel": "#/components/schemas/BasicBulkSendSessionModel",
            "BulkSendSessionModel": "#/components/schemas/BulkSendSessionModel"
          }
        }
      },
      "BasicChannelModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "appName": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "channelType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelsType"
              }
            ]
          },
          "phoneNumber": {
            "type": "string"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelState"
              }
            ]
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationReferenceIdModel"
              }
            ]
          },
          "pictureUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "BasicChannelModel": "#/components/schemas/BasicChannelModel",
            "AdminChannelModel": "#/components/schemas/AdminChannelModel",
            "ChannelModel": "#/components/schemas/ChannelModel"
          }
        }
      },
      "BasicChatModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationReferenceIdModel"
              }
            ],
            "description": "Short contact reference"
          },
          "contact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactReferenceModel"
              }
            ],
            "description": "Short contact reference"
          },
          "channel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelReferenceModel"
              }
            ],
            "description": "Short channel reference"
          },
          "sector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SectorReferenceModel"
              }
            ],
            "description": "Short Sector reference"
          },
          "organizationMember": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SimpleOrganizationMemberReferenceModel"
              },
              {
                "$ref": "#/components/schemas/OrganizationMemberReferenceModel"
              }
            ],
            "description": "The current member that has the chat",
            "nullable": true
          },
          "organizationMembers": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SimpleOrganizationMemberReferenceModel"
                },
                {
                  "$ref": "#/components/schemas/OrganizationMemberReferenceModel"
                }
              ]
            },
            "description": "All the members who participated in this chat"
          },
          "tags": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SimpleTagReferenceModel"
                },
                {
                  "$ref": "#/components/schemas/TagModel"
                }
              ]
            }
          },
          "lastMessage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageModel"
              }
            ],
            "description": "Last message sent or received. Shortcut for displaying",
            "nullable": true
          },
          "redactReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RedactReason"
              }
            ],
            "nullable": true
          },
          "open": {
            "type": "boolean"
          },
          "private": {
            "type": "boolean"
          },
          "waiting": {
            "type": "boolean"
          },
          "unread": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          "closedAtUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "eventAtUTC": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Model containing only the basic info to display a chat",
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "BasicChatModel": "#/components/schemas/BasicChatModel",
            "ChatModel": "#/components/schemas/ChatModel"
          }
        }
      },
      "BotBaseModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelReferenceIdModel"
            },
            "description": "A list of all the channels this bot will act upon"
          },
          "title": {
            "type": "string",
            "description": "The title of this bot, for internal reference only"
          },
          "order": {
            "type": "number",
            "description": "The order this bot should be put alongside others when executing",
            "format": "float"
          },
          "final": {
            "type": "boolean",
            "description": "When true, will prevent the execution of further bots on the channel if this bot decides it should execute"
          },
          "active": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "BotBaseModel": "#/components/schemas/BotBaseModel",
            "TaggingBotModel": "#/components/schemas/TaggingBotModel",
            "SectorForwardingBotModel": "#/components/schemas/SectorForwardingBotModel",
            "GreetingBotModel": "#/components/schemas/GreetingBotModel",
            "FlowchartBotModel": "#/components/schemas/FlowchartBotModel"
          }
        }
      },
      "BotBaseWrapperModel": {
        "type": "object",
        "properties": {
          "bot": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BotBaseModel"
              },
              {
                "$ref": "#/components/schemas/TaggingBotModel"
              },
              {
                "$ref": "#/components/schemas/SectorForwardingBotModel"
              },
              {
                "$ref": "#/components/schemas/GreetingBotModel"
              },
              {
                "$ref": "#/components/schemas/FlowchartBotModel"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "BotEvent": {
        "enum": [
          "ChatCreatedByContact",
          "ContactMessage",
          "ChatCreated",
          "MemberMessage",
          "Manual"
        ],
        "type": "string"
      },
      "BotInstanceReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "properties": {
          "botName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "BotOptionModel": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "stepId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "BotQuestionModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "key": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "BotQuestionModel": "#/components/schemas/BotQuestionModel",
            "ObjectiveBotQuestionModel": "#/components/schemas/ObjectiveBotQuestionModel",
            "SubjectiveQuestionModel": "#/components/schemas/SubjectiveQuestionModel"
          }
        }
      },
      "BotReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "properties": {
          "triggerOnEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BotEvent"
            }
          },
          "active": {
            "type": "boolean",
            "nullable": true
          },
          "order": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "BotTrigger": {
        "enum": [
          "ChatCreated",
          "Manual"
        ],
        "type": "string"
      },
      "BulkSendMessageModel": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageStates"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "BulkSendProperty": {
        "enum": [
          "Title",
          "InitiatedBy",
          "CreatedAtUTC",
          "MessagesSent"
        ],
        "type": "string"
      },
      "BulkSendSessionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicBulkSendSessionModel"
          }
        ],
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkSendMessageModel"
            }
          }
        },
        "additionalProperties": false
      },
      "BulkSendSessionReferenceId": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "additionalProperties": false
      },
      "BulkSendSessionReferenceModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierReferenceBaseModel"
          }
        ],
        "additionalProperties": false
      },
      "BusinessType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "translatedName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "BusinessTypeCollection": {
        "type": "object",
        "properties": {
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessType"
            }
          }
        },
        "additionalProperties": false
      },
      "ButtonTemplateModel": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "variable": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TemplateButtonVariableModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeChatPrivateStateActionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowchartActionModel"
          }
        ],
        "properties": {
          "private": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ChangeMemberModel": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "ChannelConversationWindowModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "purchased": {
            "type": "integer",
            "format": "int32"
          },
          "singlePackageConsumed": {
            "type": "integer",
            "format": "int32"
          },
          "free": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ChannelModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicChannelModel"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "about": {
            "type": "string",
            "nullable": true
          },
          "businessEntityName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "businessWebsites": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "contactEmailAddress": {
            "type": "string",
            "nullable": true
          },
          "contactName": {
            "type": "string",
            "nullable": true
          },
          "contactPhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressModel"
              }
            ],
            "nullable": true
          },
          "businessType": {
            "type": "string",
            "nullable": true
          },
          "lastSyncDate": {
            "type": "string",
            "format": "date-time"
          },
          "autoSync": {
            "type": "boolean"
          },
          "defaultSector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SectorReferenceModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "ChannelModel": "#/components/schemas/ChannelModel",
            "AdminChannelModel": "#/components/schemas/AdminChannelModel"
          }
        }
      },
      "ChannelPlatform": {
        "enum": [
          "Gupshup",
          "ApiGw",
          "AwxAbstractApi"
        ],
        "type": "string"
      },
      "ChannelReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShortReference"
          }
        ],
        "properties": {
          "phoneNumber": {
            "type": "string"
          },
          "appName": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          },
          "channelType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelsType"
              }
            ]
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelPlatform"
              }
            ],
            "nullable": true
          },
          "partnerAppToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EncryptedString"
              }
            ],
            "nullable": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelState"
              }
            ]
          },
          "defaultSector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SectorReference"
              }
            ],
            "nullable": true
          },
          "cluster": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChannelReferenceId": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "additionalProperties": false
      },
      "ChannelReferenceIdModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierReferenceBaseModel"
          }
        ],
        "additionalProperties": false
      },
      "ChannelReferenceModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceBaseModel"
          }
        ],
        "properties": {
          "phoneNumber": {
            "type": "string"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelState"
              }
            ]
          },
          "channelType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelsType"
              }
            ]
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelPlatform"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChannelReferencePlatform": {
        "enum": [
          "OficialV1",
          "StarterV1",
          "StarterV2"
        ],
        "type": "string",
        "description": "We created that enum to prevent clients to know the backend technologies we work"
      },
      "ChannelStartQRCodeModel": {
        "type": "object",
        "properties": {
          "qrCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChannelStartSessionModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "qrCode": {
            "type": "string",
            "nullable": true
          },
          "picture": {
            "type": "string",
            "nullable": true
          },
          "pushname": {
            "type": "string",
            "nullable": true
          },
          "phoneAlreadyExists": {
            "type": "boolean"
          },
          "isDifferentPhoneConnected": {
            "type": "boolean"
          },
          "channelState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelState"
              }
            ]
          },
          "channelPlatform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelReferencePlatform"
              }
            ],
            "description": "We created that enum to prevent clients to know the backend technologies we work"
          }
        },
        "additionalProperties": false
      },
      "ChannelState": {
        "enum": [
          "WaitingAppCreation",
          "WaitingToGoLive",
          "Probation",
          "Live",
          "Offline",
          "Deleted",
          "WaitingFirstSync"
        ],
        "type": "string"
      },
      "ChannelsType": {
        "enum": [
          "WhatsappApi",
          "WhatsappBroker",
          "Welcomer",
          "Instagram"
        ],
        "type": "string"
      },
      "ChatChannelReferenceId": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "properties": {
          "channelId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "ChatContactModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressModel"
            }
          },
          "phoneNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "profilePictureBlob": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChatFilter": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShortReference"
          }
        ],
        "properties": {
          "sectors": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldFilterOfObjectId"
              }
            ]
          },
          "tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldFilterOfObjectId"
              }
            ]
          },
          "members": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldFilterOfObjectId"
              }
            ]
          },
          "channels": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldFilterOfObjectId"
              }
            ]
          },
          "chatState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatState"
              }
            ]
          },
          "lastMessage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastMessage"
              }
            ]
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "orderFilter": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ChatFilterModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceBaseModel"
          }
        ],
        "properties": {
          "sectors": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldFilterOfObjectId"
              }
            ]
          },
          "tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldFilterOfObjectId"
              }
            ]
          },
          "members": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldFilterOfObjectId"
              }
            ]
          },
          "channels": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldFilterOfObjectId"
              }
            ]
          },
          "chatState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatState"
              }
            ]
          },
          "lastMessage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastMessage"
              }
            ]
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "orderFilter": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ChatIdReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "additionalProperties": false
      },
      "ChatIdReferenceModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierReferenceBaseModel"
          }
        ],
        "additionalProperties": false
      },
      "ChatModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicChatModel"
          }
        ],
        "properties": {
          "hasMessagesBeforeAllowedHistory": {
            "type": "boolean"
          },
          "latestMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageModel"
            }
          }
        },
        "additionalProperties": false
      },
      "ChatReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShortReference"
          }
        ],
        "properties": {
          "channel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelReference"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ChatState": {
        "enum": [
          "Open",
          "Closed",
          "All"
        ],
        "type": "string"
      },
      "ChatbotModel": {
        "required": [
          "botId",
          "chatId",
          "organizationId",
          "triggerName"
        ],
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "botId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "triggerName": {
            "minLength": 1,
            "type": "string"
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "CloseChatActionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowchartBotStepModel"
          }
        ],
        "additionalProperties": false
      },
      "Color": {
        "enum": [
          "Blue",
          "Skyblue",
          "Cyan",
          "Aquamarine",
          "Green",
          "Kiwi",
          "Gold",
          "Amber",
          "Tangerine",
          "Chocolate",
          "Salmon",
          "Tomato",
          "Rose",
          "Pink",
          "Magenta",
          "Violet",
          "Grape",
          "Gray",
          "Silver",
          "Umblerito"
        ],
        "type": "string"
      },
      "ContactModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SimpleContactModel"
          }
        ],
        "properties": {
          "gender": {
            "type": "string",
            "nullable": true
          },
          "landline": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressModel"
              }
            ],
            "nullable": true
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteModel"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SimpleTagReferenceModel"
                },
                {
                  "$ref": "#/components/schemas/TagModel"
                }
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "ContactProperty": {
        "enum": [
          "Name",
          "PhoneNumber",
          "Email"
        ],
        "type": "string"
      },
      "ContactReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NullableNameShortReference"
          }
        ],
        "properties": {
          "phoneNumber": {
            "type": "string"
          },
          "whatsAppPhoneNumber": {
            "type": "string",
            "nullable": true
          },
          "profilePictureUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          },
          "lastActiveUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isOptIn": {
            "type": "boolean"
          },
          "isBlocked": {
            "type": "boolean"
          },
          "scheduledMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduledMessageReference"
            }
          },
          "groupIdentifier": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagReference"
            }
          }
        },
        "additionalProperties": false
      },
      "ContactReferenceId": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "additionalProperties": false
      },
      "ContactReferenceModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceNullableNameBaseModel"
          }
        ],
        "properties": {
          "lastActiveUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string"
          },
          "profilePictureUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          },
          "isOptIn": {
            "type": "boolean"
          },
          "isBlocked": {
            "type": "boolean"
          },
          "scheduledMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduledMessageReference"
            }
          },
          "groupIdentifier": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SimpleTagReferenceModel"
                },
                {
                  "$ref": "#/components/schemas/TagModel"
                }
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "ContactSaveModel": {
        "type": "object",
        "properties": {
          "contact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactModel"
              }
            ]
          },
          "alreadyExisted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ContractPlan": {
        "enum": [
          "Basic",
          "Professional",
          "Enterprise"
        ],
        "type": "string"
      },
      "ContractStatus": {
        "enum": [
          "AwaitingPayment",
          "AwaitingRelease",
          "AwaitingReactivation",
          "Active",
          "AwaitingDeactivation",
          "Inactive",
          "Canceled",
          "PreCanceled",
          "AwaitingSubscription",
          "Free"
        ],
        "type": "string"
      },
      "ConversationWindowModel": {
        "type": "object",
        "properties": {
          "remainingConversationWindow": {
            "type": "integer",
            "format": "int32"
          },
          "remainingConversationWindowWithoutSinglePackages": {
            "type": "integer",
            "format": "int32"
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationConversationWindowModel"
              }
            ]
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelConversationWindowModel"
            }
          },
          "singlePackages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationSinglePackageModel"
            }
          }
        },
        "additionalProperties": false
      },
      "CountryRequiredEditAddressModel": {
        "required": [
          "country"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EditAddressModel"
          }
        ],
        "properties": {
          "country": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateBotBase": {
        "required": [
          "_t",
          "channelIds",
          "organizationId",
          "title"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "type": "string"
          },
          "channelIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            },
            "description": "A list of all the channels this bot will act upon"
          },
          "trigger": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BotTrigger"
              }
            ]
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "title": {
            "minLength": 1,
            "type": "string",
            "description": "The title of this bot, for internal reference only"
          },
          "order": {
            "type": "number",
            "description": "The order this bot should be put alongside others when executing",
            "format": "float"
          },
          "final": {
            "type": "boolean",
            "description": "When true, will prevent the execution of further bots on the channel if this bot decides it should execute"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "CreateBotBase": "#/components/schemas/CreateBotBase",
            "CreateTaggingBotModel": "#/components/schemas/CreateTaggingBotModel",
            "CreateSectorForwardingBotModel": "#/components/schemas/CreateSectorForwardingBotModel",
            "CreateGreetingBotModel": "#/components/schemas/CreateGreetingBotModel",
            "CreateFlowchartBotModel": "#/components/schemas/CreateFlowchartBotModel"
          }
        }
      },
      "CreateBotOptionModel": {
        "required": [
          "text"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericOptionModel"
          }
        ],
        "properties": {
          "text": {
            "maxLength": 24,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateBulkSendSessionModel": {
        "required": [
          "channelId",
          "expectedMessages",
          "organizationId",
          "title"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "channelId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "title": {
            "maxLength": 128,
            "minLength": 3,
            "type": "string"
          },
          "expectedMessages": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateChangeChatPrivateStateActionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateFlowchartActionModel"
          }
        ],
        "properties": {
          "private": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreateChatFilterModel": {
        "required": [
          "chatState",
          "lastMessage",
          "name",
          "order",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "sectors": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldFilterOfObjectId"
              }
            ],
            "nullable": true
          },
          "tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldFilterOfObjectId"
              }
            ],
            "nullable": true
          },
          "members": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldFilterOfObjectId"
              }
            ],
            "nullable": true
          },
          "channels": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldFilterOfObjectId"
              }
            ],
            "nullable": true
          },
          "chatState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatState"
              }
            ]
          },
          "lastMessage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastMessage"
              }
            ]
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ]
          },
          "name": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "CreateChatModel": {
        "required": [
          "channelId",
          "contactId",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "channelId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "CreateCloseChatActionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateFlowchartBotStepModel"
          }
        ],
        "additionalProperties": false
      },
      "CreateContactModel": {
        "required": [
          "organizationId",
          "phoneNumber"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string",
            "description": "A phone number in the E.164 standard",
            "example": "+5511987654321"
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "address": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/EditAddressModel"
              },
              {
                "$ref": "#/components/schemas/RequiredEditAddressModel"
              },
              {
                "$ref": "#/components/schemas/CountryRequiredEditAddressModel"
              }
            ],
            "nullable": true
          },
          "landline": {
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string",
            "description": "A phone number in the E.164 standard",
            "nullable": true,
            "example": "+5511987654321"
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "profilePictureUrl": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateDayOfTheWeekStepModel": {
        "required": [
          "stepsForDaysOfTheWeek",
          "timeZone"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateFlowchartBotStepModel"
          }
        ],
        "properties": {
          "stepsForDaysOfTheWeek": {
            "maxItems": 7,
            "minItems": 7,
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          "timeZone": {
            "type": "string",
            "description": "IANA timezone code",
            "format": "time-zone-id"
          }
        },
        "additionalProperties": false
      },
      "CreateFlowchartActionModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateFlowchartBotStepModel"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "nextStepId": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "CreateFlowchartActionModel": "#/components/schemas/CreateFlowchartActionModel",
            "CreateTagActionModel": "#/components/schemas/CreateTagActionModel",
            "CreateSetWaitingStateActionModel": "#/components/schemas/CreateSetWaitingStateActionModel",
            "CreateSendMessageActionModel": "#/components/schemas/CreateSendMessageActionModel",
            "CreateSectorTransferActionModel": "#/components/schemas/CreateSectorTransferActionModel",
            "CreateMemberTransferActionModel": "#/components/schemas/CreateMemberTransferActionModel",
            "CreateChangeChatPrivateStateActionModel": "#/components/schemas/CreateChangeChatPrivateStateActionModel"
          }
        }
      },
      "CreateFlowchartBotChatStartedEventModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateFlowchartBotEventModel"
          }
        ],
        "additionalProperties": false
      },
      "CreateFlowchartBotEventModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateFlowchartBotStepModel"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "nextStepId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "CreateFlowchartBotEventModel": "#/components/schemas/CreateFlowchartBotEventModel",
            "CreateFlowchartBotManualStartedEventModel": "#/components/schemas/CreateFlowchartBotManualStartedEventModel",
            "CreateFlowchartBotChatStartedEventModel": "#/components/schemas/CreateFlowchartBotChatStartedEventModel"
          }
        }
      },
      "CreateFlowchartBotManualStartedEventModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateFlowchartBotEventModel"
          }
        ],
        "properties": {
          "triggerName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateFlowchartBotModel": {
        "required": [
          "steps"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateBotBase"
          }
        ],
        "properties": {
          "steps": {
            "minItems": 1,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateFlowchartBotStepModel"
                },
                {
                  "$ref": "#/components/schemas/CreateTemplateMessageStepModel"
                },
                {
                  "$ref": "#/components/schemas/CreateWebhookActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateTimeOfDayStepModel"
                },
                {
                  "$ref": "#/components/schemas/CreateTagActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateStartManualEntryActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateFlowchartActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateFlowchartBotEventModel"
                },
                {
                  "$ref": "#/components/schemas/CreateInteractiveStepModel"
                },
                {
                  "$ref": "#/components/schemas/CreateSetWaitingStateActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateSendMessageActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateSectorTransferActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateRegexStepModel"
                },
                {
                  "$ref": "#/components/schemas/CreateOptionsStepModel"
                },
                {
                  "$ref": "#/components/schemas/CreateMemberTransferActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateFlowchartBotManualStartedEventModel"
                },
                {
                  "$ref": "#/components/schemas/CreateDayOfTheWeekStepModel"
                },
                {
                  "$ref": "#/components/schemas/CreateCloseChatActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateFlowchartBotChatStartedEventModel"
                },
                {
                  "$ref": "#/components/schemas/CreateChangeChatPrivateStateActionModel"
                }
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "CreateFlowchartBotStepModel": {
        "required": [
          "_t",
          "id",
          "position"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "position": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PositionModel"
              }
            ]
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "CreateFlowchartBotStepModel": "#/components/schemas/CreateFlowchartBotStepModel",
            "CreateTemplateMessageStepModel": "#/components/schemas/CreateTemplateMessageStepModel",
            "CreateWebhookActionModel": "#/components/schemas/CreateWebhookActionModel",
            "CreateTimeOfDayStepModel": "#/components/schemas/CreateTimeOfDayStepModel",
            "CreateTagActionModel": "#/components/schemas/CreateTagActionModel",
            "CreateStartManualEntryActionModel": "#/components/schemas/CreateStartManualEntryActionModel",
            "CreateFlowchartActionModel": "#/components/schemas/CreateFlowchartActionModel",
            "CreateFlowchartBotEventModel": "#/components/schemas/CreateFlowchartBotEventModel",
            "CreateInteractiveStepModel": "#/components/schemas/CreateInteractiveStepModel",
            "CreateSetWaitingStateActionModel": "#/components/schemas/CreateSetWaitingStateActionModel",
            "CreateSendMessageActionModel": "#/components/schemas/CreateSendMessageActionModel",
            "CreateSectorTransferActionModel": "#/components/schemas/CreateSectorTransferActionModel",
            "CreateRegexStepModel": "#/components/schemas/CreateRegexStepModel",
            "CreateOptionsStepModel": "#/components/schemas/CreateOptionsStepModel",
            "CreateMemberTransferActionModel": "#/components/schemas/CreateMemberTransferActionModel",
            "CreateFlowchartBotManualStartedEventModel": "#/components/schemas/CreateFlowchartBotManualStartedEventModel",
            "CreateDayOfTheWeekStepModel": "#/components/schemas/CreateDayOfTheWeekStepModel",
            "CreateCloseChatActionModel": "#/components/schemas/CreateCloseChatActionModel",
            "CreateFlowchartBotChatStartedEventModel": "#/components/schemas/CreateFlowchartBotChatStartedEventModel",
            "CreateChangeChatPrivateStateActionModel": "#/components/schemas/CreateChangeChatPrivateStateActionModel"
          }
        }
      },
      "CreateGreetingBotModel": {
        "required": [
          "message"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateBotBase"
          }
        ],
        "properties": {
          "message": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateInteractiveStepModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateFlowchartBotStepModel"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "CreateInteractiveStepModel": "#/components/schemas/CreateInteractiveStepModel",
            "CreateTemplateMessageStepModel": "#/components/schemas/CreateTemplateMessageStepModel",
            "CreateRegexStepModel": "#/components/schemas/CreateRegexStepModel",
            "CreateOptionsStepModel": "#/components/schemas/CreateOptionsStepModel"
          }
        }
      },
      "CreateMemberTransferActionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateFlowchartActionModel"
          }
        ],
        "properties": {
          "options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateMemberTransferModel"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "CreateMemberTransferModel": {
        "type": "object",
        "properties": {
          "memberIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          "strategy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberTransferStrategy"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "CreateMessageModel": {
        "required": [
          "chatId",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "tempId": {
            "type": "string",
            "description": "An Id generated by the client that is passed along when the message is comitted to the database and has the true id. Not necessary for fire-and-forget situations",
            "default": null,
            "nullable": true
          },
          "file": {
            "type": "string",
            "format": "binary",
            "default": null,
            "nullable": true
          },
          "prefix": {
            "type": "string",
            "description": "A prefix to be concatenated with the message. Used by the app to include the operator name. Not required",
            "default": null,
            "nullable": true
          },
          "message": {
            "maxLength": 2000,
            "type": "string",
            "description": "The message to send",
            "default": "Ol�!",
            "nullable": true
          },
          "chatId": {
            "type": "string",
            "description": "The Id of the chat to send the message to. Must exist and be open",
            "example": "AB_12-xyzEXAMPLE"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Private messages are not sent to the contact, they function like an internal annotation",
            "default": false
          },
          "previousMessageId": {
            "type": "string",
            "description": "Used by the app to ensure messages are sent in order. Not necessary",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "stickUrl": {
            "type": "string",
            "description": "If the message you're sendind is a sticker, here you put its URL",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          },
          "replyToMessageId": {
            "type": "string",
            "description": "When the message you're sending is a reply to another message, use the other message's Id here",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "skipReassign": {
            "type": "boolean",
            "description": "When true, will skip the step of reassigning the conversation to the user who sent the message",
            "default": false
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "CreateMessageSimplifiedModel": {
        "required": [
          "fromPhone",
          "organizationId",
          "toPhone"
        ],
        "type": "object",
        "properties": {
          "toPhone": {
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string",
            "description": "A phone number in the E.164 standard",
            "example": "+5511987654321"
          },
          "fromPhone": {
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string",
            "description": "A phone number in the E.164 standard",
            "example": "+5511987654321"
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "message": {
            "maxLength": 2000,
            "type": "string",
            "default": "Ol�!",
            "nullable": true
          },
          "file": {
            "type": "string",
            "format": "binary",
            "default": null,
            "nullable": true
          },
          "skipReassign": {
            "type": "boolean",
            "description": "When true, will skip the step of reassigning the conversation to the user who sent the message",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "CreateNoteModel": {
        "required": [
          "content",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "content": {
            "minLength": 1,
            "type": "string"
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "CreateOptionsStepModel": {
        "required": [
          "text"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateInteractiveStepModel"
          }
        ],
        "properties": {
          "options": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateBotOptionModel"
            }
          },
          "text": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "defaultNextStep": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "CreateQuickAnswerModel": {
        "required": [
          "content",
          "name",
          "organizationId",
          "visibility"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "name": {
            "maxLength": 160,
            "minLength": 0,
            "type": "string"
          },
          "visibility": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuickAnswerVisibility"
              }
            ]
          },
          "content": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateRegexOptionModel": {
        "required": [
          "pattern"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericOptionModel"
          }
        ],
        "properties": {
          "pattern": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateRegexStepModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateInteractiveStepModel"
          }
        ],
        "properties": {
          "options": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRegexOptionModel"
            }
          },
          "text": {
            "maxLength": 1024,
            "type": "string"
          },
          "canUseLastMessage": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreateScheduledMessageModel": {
        "required": [
          "dateSendAtUTC",
          "message",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "dateSendAtUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "message": {
            "minLength": 1,
            "type": "string"
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "channelId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "contactId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "templateId": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "params": {
            "maxLength": 40,
            "minLength": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateSectorForwardingBotModel": {
        "required": [
          "body",
          "prefix",
          "sectors"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateBotBase"
          }
        ],
        "properties": {
          "body": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "sectors": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          "prefix": {
            "maxLength": 60,
            "minLength": 1,
            "type": "string"
          },
          "sendTransferSectorMessage": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreateSectorModel": {
        "required": [
          "name",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 24,
            "minLength": 1,
            "type": "string"
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "CreateSectorTransferActionModel": {
        "required": [
          "sectorId"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateFlowchartActionModel"
          }
        ],
        "properties": {
          "sectorId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "CreateSendMessageActionModel": {
        "required": [
          "message"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateFlowchartActionModel"
          }
        ],
        "properties": {
          "message": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "isPrivate": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreateSetWaitingStateActionModel": {
        "required": [
          "waiting"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateFlowchartActionModel"
          }
        ],
        "properties": {
          "waiting": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreateStartManualEntryActionModel": {
        "required": [
          "botId",
          "manualEventId"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateFlowchartBotStepModel"
          }
        ],
        "properties": {
          "botId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "manualEventId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "CreateStarterChannelModel": {
        "required": [
          "displayName",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "minLength": 1,
            "type": "string"
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "CreateStickerModel": {
        "required": [
          "organizationId",
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com"
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "CreateTagActionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateFlowchartActionModel"
          }
        ],
        "properties": {
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          "contactTags": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        },
        "additionalProperties": false
      },
      "CreateTagModel": {
        "required": [
          "name",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 30,
            "minLength": 1,
            "pattern": "^[a-zA-Z\\u00C0-\\u00FF 0-9]{1,}$",
            "type": "string"
          },
          "emoji": {
            "pattern": "(\\u00a9|\\u00ae|[\\u2000-\\u3300]|\\ud83c[\\ud000-\\udfff]|\\ud83d[\\ud000-\\udfff]|\\ud83e[\\ud000-\\udfff])?",
            "type": "string",
            "nullable": true
          },
          "color": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Color"
              }
            ]
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "CreateTaggingBotModel": {
        "required": [
          "tagIds"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateBotBase"
          }
        ],
        "properties": {
          "tagIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        },
        "additionalProperties": false
      },
      "CreateTemplateMessageModel": {
        "required": [
          "chatId",
          "organizationId",
          "templateId"
        ],
        "type": "object",
        "properties": {
          "templateId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "chatId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "params": {
            "maxLength": 40,
            "minLength": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "skipReassign": {
            "type": "boolean",
            "description": "When true, will skip the step of reassigning the conversation to the user who sent the message",
            "default": false
          },
          "bulkSession": {
            "type": "string",
            "description": "Used to group messages by a bulk send session",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "CreateTemplateMessageOptionModel": {
        "required": [
          "buttonText"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericOptionModel"
          }
        ],
        "properties": {
          "buttonText": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateTemplateMessageSimplifiedModel": {
        "required": [
          "fromPhone",
          "organizationId",
          "templateId",
          "toPhone"
        ],
        "type": "object",
        "properties": {
          "toPhone": {
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string",
            "description": "A phone number in the E.164 standard",
            "example": "+5511987654321"
          },
          "fromPhone": {
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string",
            "description": "A phone number in the E.164 standard",
            "example": "+5511987654321"
          },
          "templateId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "params": {
            "maxLength": 40,
            "minLength": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "skipReassign": {
            "type": "boolean",
            "description": "When true, will skip the step of reassigning the conversation to the user who sent the message",
            "default": false
          },
          "bulkSession": {
            "type": "string",
            "description": "Used to group messages by a bulk send session",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "file": {
            "type": "string",
            "format": "binary",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTemplateMessageStepModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateInteractiveStepModel"
          }
        ],
        "properties": {
          "templateId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "params": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateTemplateMessageOptionModel"
            }
          }
        },
        "additionalProperties": false
      },
      "CreateTemplateModel": {
        "required": [
          "category",
          "channelId",
          "content",
          "label",
          "organizationId",
          "templateType"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "channelId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "label": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "category": {
            "minLength": 1,
            "type": "string"
          },
          "templateType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TemplateType"
              }
            ]
          },
          "header": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TemplateHeaderCreateModel"
              }
            ],
            "description": "Template's header. Only applicable when template type is text.",
            "nullable": true
          },
          "content": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "footer": {
            "maxLength": 60,
            "type": "string",
            "nullable": true
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateExampleCreateModel"
            }
          },
          "buttons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateButtonModel"
            },
            "nullable": true
          },
          "mediaId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTemplateOptionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericOptionModel"
          }
        ],
        "properties": {
          "buttonParams": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTimeOfDayStepModel": {
        "required": [
          "ranges",
          "timeZone"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateFlowchartBotStepModel"
          }
        ],
        "properties": {
          "ranges": {
            "minItems": 2,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepTimeOfDayRangeModel"
            }
          },
          "timeZone": {
            "type": "string",
            "description": "IANA timezone code",
            "format": "time-zone-id"
          }
        },
        "additionalProperties": false
      },
      "CreateWabaChannelModel": {
        "required": [
          "about",
          "address",
          "businessEntityName",
          "businessManagerId",
          "businessType",
          "displayName",
          "organizationId",
          "phoneNumber",
          "phoneType",
          "wabaStatus"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "minLength": 1,
            "type": "string",
            "description": "The display name to show within uTalk and as the username for the WhatsApp account. Must follow these rules: https://developers.facebook.com/docs/whatsapp/display-name"
          },
          "phoneNumber": {
            "minLength": 1,
            "type": "string",
            "description": "The phone number",
            "format": "tel"
          },
          "businessEntityName": {
            "minLength": 1,
            "type": "string"
          },
          "about": {
            "minLength": 1,
            "type": "string"
          },
          "phoneType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneType"
              }
            ]
          },
          "pictureDataUrl": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "businessWebsites": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryRequiredEditAddressModel"
              }
            ]
          },
          "businessType": {
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "wabaStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumberWabaStatus"
              }
            ]
          },
          "defaultSectorId": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "currentBSPId": {
            "pattern": "^\\d{14,18}$",
            "type": "string",
            "description": "The Id of the current BSP the number is with. Required if Umbler.UTalk.Core.Models.Channel.CreateWabaChannelModel.WabaStatus is Umbler.UTalk.Core.Domain.PhoneNumberWabaStatus.MigrateWaba",
            "nullable": true
          },
          "businessManagerId": {
            "minLength": 1,
            "pattern": "^\\d{14,18}$",
            "type": "string",
            "description": "The Id of the Facebook business account the number is already in or will be created at."
          },
          "facebookPageUrl": {
            "pattern": "^https://(www\\.)?facebook\\.com/.+$",
            "type": "string",
            "description": "Required if Umbler.UTalk.Core.Models.Channel.CreateWabaChannelModel.WabaStatus is Umbler.UTalk.Core.Domain.PhoneNumberWabaStatus.MigrateWaba",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          }
        },
        "additionalProperties": false
      },
      "CreateWebhookActionModel": {
        "required": [
          "uri"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateFlowchartBotStepModel"
          }
        ],
        "properties": {
          "uri": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com"
          },
          "onSuccess": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "onFail": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "CreateWebhookModel": {
        "required": [
          "channelIds",
          "name",
          "organizationId",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com"
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "channelIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        },
        "additionalProperties": false
      },
      "DayOfTheWeekStepModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowchartBotStepModel"
          }
        ],
        "properties": {
          "stepsForDaysOfTheWeek": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          "timeZone": {
            "type": "string",
            "description": "IANA timezone code",
            "format": "time-zone-id"
          }
        },
        "additionalProperties": false
      },
      "DeleteContactChatAction": {
        "enum": [
          "Close",
          "Delete"
        ],
        "type": "string"
      },
      "EditAddressModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "type": "string"
          },
          "addressLine1": {
            "type": "string",
            "nullable": true
          },
          "addressLine2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "EditAddressModel": "#/components/schemas/EditAddressModel",
            "RequiredEditAddressModel": "#/components/schemas/RequiredEditAddressModel",
            "CountryRequiredEditAddressModel": "#/components/schemas/CountryRequiredEditAddressModel"
          }
        }
      },
      "EditBotBase": {
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "type": "string"
          },
          "channelIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            },
            "description": "A list of all the channels this bot will act upon",
            "nullable": true
          },
          "trigger": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BotTrigger"
              }
            ]
          },
          "title": {
            "type": "string",
            "description": "The title of this bot, for internal reference only",
            "nullable": true
          },
          "order": {
            "type": "number",
            "description": "The order this bot should be put alongside others when executing",
            "format": "float",
            "nullable": true
          },
          "final": {
            "type": "boolean",
            "description": "When true, will prevent the execution of further bots on the channel if this bot decides it should execute",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "EditBotBase": "#/components/schemas/EditBotBase",
            "EditTaggingBotModel": "#/components/schemas/EditTaggingBotModel",
            "EditSectorForwardingBotModel": "#/components/schemas/EditSectorForwardingBotModel",
            "EditGreetingBotModel": "#/components/schemas/EditGreetingBotModel",
            "EditFlowchartBotModel": "#/components/schemas/EditFlowchartBotModel"
          }
        }
      },
      "EditFlowchartBotModel": {
        "required": [
          "steps"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EditBotBase"
          }
        ],
        "properties": {
          "steps": {
            "minItems": 1,
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateFlowchartBotStepModel"
                },
                {
                  "$ref": "#/components/schemas/CreateTemplateMessageStepModel"
                },
                {
                  "$ref": "#/components/schemas/CreateWebhookActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateTimeOfDayStepModel"
                },
                {
                  "$ref": "#/components/schemas/CreateTagActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateStartManualEntryActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateFlowchartActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateFlowchartBotEventModel"
                },
                {
                  "$ref": "#/components/schemas/CreateInteractiveStepModel"
                },
                {
                  "$ref": "#/components/schemas/CreateSetWaitingStateActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateSendMessageActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateSectorTransferActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateRegexStepModel"
                },
                {
                  "$ref": "#/components/schemas/CreateOptionsStepModel"
                },
                {
                  "$ref": "#/components/schemas/CreateMemberTransferActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateFlowchartBotManualStartedEventModel"
                },
                {
                  "$ref": "#/components/schemas/CreateDayOfTheWeekStepModel"
                },
                {
                  "$ref": "#/components/schemas/CreateCloseChatActionModel"
                },
                {
                  "$ref": "#/components/schemas/CreateFlowchartBotChatStartedEventModel"
                },
                {
                  "$ref": "#/components/schemas/CreateChangeChatPrivateStateActionModel"
                }
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "EditGreetingBotModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EditBotBase"
          }
        ],
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EditSectorForwardingBotModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EditBotBase"
          }
        ],
        "properties": {
          "body": {
            "maxLength": 1024,
            "type": "string",
            "nullable": true
          },
          "sectors": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            },
            "nullable": true
          },
          "prefix": {
            "maxLength": 60,
            "type": "string",
            "nullable": true
          },
          "sendTransferSectorMessage": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EditTaggingBotModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EditBotBase"
          }
        ],
        "properties": {
          "tagIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EncryptedString": {
        "type": "object",
        "additionalProperties": false
      },
      "ExportContactsLinkResponseModel": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExportType"
              }
            ]
          },
          "link": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com"
          },
          "expiresUTC": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ExportType": {
        "enum": [
          "CSV",
          "VCF"
        ],
        "type": "string"
      },
      "FieldFilterOfObjectId": {
        "type": "object",
        "properties": {
          "rule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FilterRules"
              }
            ]
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        },
        "additionalProperties": false
      },
      "FilterRules": {
        "enum": [
          "Any",
          "None",
          "ContainsAny",
          "NoneOrContainsAny"
        ],
        "type": "string"
      },
      "FilterTypes": {
        "enum": [
          "Open",
          "Waiting",
          "Closed"
        ],
        "type": "string"
      },
      "FlowchartActionModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowchartBotStepModel"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "nextStepId": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "FlowchartActionModel": "#/components/schemas/FlowchartActionModel",
            "TagActionModel": "#/components/schemas/TagActionModel",
            "SetWaitingStateActionModel": "#/components/schemas/SetWaitingStateActionModel",
            "SendMessageActionModel": "#/components/schemas/SendMessageActionModel",
            "SectorTransferActionModel": "#/components/schemas/SectorTransferActionModel",
            "MemberTransferActionModel": "#/components/schemas/MemberTransferActionModel",
            "ChangeChatPrivateStateActionModel": "#/components/schemas/ChangeChatPrivateStateActionModel"
          }
        }
      },
      "FlowchartBotChatStartedEventModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowchartBotEventModel"
          }
        ],
        "additionalProperties": false
      },
      "FlowchartBotEventModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowchartBotStepModel"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "nextStepId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "FlowchartBotEventModel": "#/components/schemas/FlowchartBotEventModel",
            "FlowchartBotManualStartedEventModel": "#/components/schemas/FlowchartBotManualStartedEventModel",
            "FlowchartBotChatStartedEventModel": "#/components/schemas/FlowchartBotChatStartedEventModel"
          }
        }
      },
      "FlowchartBotManualStartedEventModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowchartBotEventModel"
          }
        ],
        "properties": {
          "triggerName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "FlowchartBotModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BotBaseModel"
          }
        ],
        "properties": {
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BotEvent"
            }
          },
          "manualTriggers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "steps": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FlowchartBotStepModel"
                },
                {
                  "$ref": "#/components/schemas/TemplateMessageStepModel"
                },
                {
                  "$ref": "#/components/schemas/WebhookActionModel"
                },
                {
                  "$ref": "#/components/schemas/TimeOfDayStepModel"
                },
                {
                  "$ref": "#/components/schemas/TagActionModel"
                },
                {
                  "$ref": "#/components/schemas/StartManualEntryActionModel"
                },
                {
                  "$ref": "#/components/schemas/FlowchartActionModel"
                },
                {
                  "$ref": "#/components/schemas/FlowchartBotEventModel"
                },
                {
                  "$ref": "#/components/schemas/InteractiveStepModel"
                },
                {
                  "$ref": "#/components/schemas/SetWaitingStateActionModel"
                },
                {
                  "$ref": "#/components/schemas/SendMessageActionModel"
                },
                {
                  "$ref": "#/components/schemas/SectorTransferActionModel"
                },
                {
                  "$ref": "#/components/schemas/RegexStepModel"
                },
                {
                  "$ref": "#/components/schemas/OptionsStepModel"
                },
                {
                  "$ref": "#/components/schemas/MemberTransferActionModel"
                },
                {
                  "$ref": "#/components/schemas/FlowchartBotManualStartedEventModel"
                },
                {
                  "$ref": "#/components/schemas/DayOfTheWeekStepModel"
                },
                {
                  "$ref": "#/components/schemas/CloseChatActionModel"
                },
                {
                  "$ref": "#/components/schemas/FlowchartBotChatStartedEventModel"
                },
                {
                  "$ref": "#/components/schemas/ChangeChatPrivateStateActionModel"
                }
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "FlowchartBotStepModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "position": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PositionModel"
              }
            ]
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "FlowchartBotStepModel": "#/components/schemas/FlowchartBotStepModel",
            "TemplateMessageStepModel": "#/components/schemas/TemplateMessageStepModel",
            "WebhookActionModel": "#/components/schemas/WebhookActionModel",
            "TimeOfDayStepModel": "#/components/schemas/TimeOfDayStepModel",
            "TagActionModel": "#/components/schemas/TagActionModel",
            "StartManualEntryActionModel": "#/components/schemas/StartManualEntryActionModel",
            "FlowchartActionModel": "#/components/schemas/FlowchartActionModel",
            "FlowchartBotEventModel": "#/components/schemas/FlowchartBotEventModel",
            "InteractiveStepModel": "#/components/schemas/InteractiveStepModel",
            "SetWaitingStateActionModel": "#/components/schemas/SetWaitingStateActionModel",
            "SendMessageActionModel": "#/components/schemas/SendMessageActionModel",
            "SectorTransferActionModel": "#/components/schemas/SectorTransferActionModel",
            "RegexStepModel": "#/components/schemas/RegexStepModel",
            "OptionsStepModel": "#/components/schemas/OptionsStepModel",
            "MemberTransferActionModel": "#/components/schemas/MemberTransferActionModel",
            "FlowchartBotManualStartedEventModel": "#/components/schemas/FlowchartBotManualStartedEventModel",
            "DayOfTheWeekStepModel": "#/components/schemas/DayOfTheWeekStepModel",
            "CloseChatActionModel": "#/components/schemas/CloseChatActionModel",
            "FlowchartBotChatStartedEventModel": "#/components/schemas/FlowchartBotChatStartedEventModel",
            "ChangeChatPrivateStateActionModel": "#/components/schemas/ChangeChatPrivateStateActionModel"
          }
        }
      },
      "ForwardMessageModel": {
        "required": [
          "chatId",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "description": "The chat to forward the message to",
            "example": "AB_12-xyzEXAMPLE"
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "skipReassign": {
            "type": "boolean",
            "description": "When true, will skip the step of reassigning the conversation to the user who sent the message",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "FriendlyErrorReasons": {
        "enum": [
          "ProOffline",
          "BSPRejected",
          "BSPError",
          "BSPUnknown",
          "BSPUnavailable",
          "Unknown",
          "BrokerUnavailable",
          "BrokerUnknown",
          "BrokerError",
          "BrokerWhatsappWebIsOpening",
          "BrokerContainerOrSessionOffline",
          "BrokerQRCodeWasNotScanned",
          "BrokerCouldntDetermineMessageWasSent",
          "MaxTemplateCountReached",
          "ContactInactiveRequiresTemplate",
          "UserDoesNotExist",
          "FacebookSendTemplateLimitReached",
          "FacebookSendTemplateLimitReachedPerSpam",
          "ExceededConversationWindowLimitReached",
          "PhoneNumberIsPartOfAnExperiment"
        ],
        "type": "string"
      },
      "FullMessageStateModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/MessageStateModel"
          }
        ],
        "properties": {
          "code": {
            "type": "integer",
            "description": "Code of the error when fail to deliver the message",
            "format": "int32",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "description": "Reason of the error when fail to deliver the message",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FullOrganizationDetailsModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SimpleOrganizationModel"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "financeEmail": {
            "type": "string",
            "nullable": true
          },
          "financeWhatsapp": {
            "type": "string",
            "nullable": true
          },
          "cnpj": {
            "type": "string",
            "nullable": true
          },
          "socialReason": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "cep": {
            "type": "string",
            "nullable": true
          },
          "road": {
            "type": "string",
            "nullable": true
          },
          "neighbourhood": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "complement": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "deletedAtUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "officialMaxMonthlyLimit": {
            "type": "integer",
            "format": "int32"
          },
          "exceedingConversationWindowLimit": {
            "type": "integer",
            "format": "int32"
          },
          "exceededConversationWindow": {
            "type": "integer",
            "format": "int32"
          },
          "maxExceedingConversationWindow": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tempMaxExceedingConversationWindow": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dateBecameCustomer": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "channelPlatforms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelPlatform"
            }
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "FullOrganizationDetailsModel": "#/components/schemas/FullOrganizationDetailsModel",
            "UmblerOrganizationModel": "#/components/schemas/UmblerOrganizationModel"
          }
        }
      },
      "GenericOptionModel": {
        "required": [
          "_t",
          "stepId"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "type": "string"
          },
          "stepId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "GenericOptionModel": "#/components/schemas/GenericOptionModel",
            "CreateTemplateMessageOptionModel": "#/components/schemas/CreateTemplateMessageOptionModel",
            "CreateTemplateOptionModel": "#/components/schemas/CreateTemplateOptionModel",
            "CreateRegexOptionModel": "#/components/schemas/CreateRegexOptionModel",
            "CreateBotOptionModel": "#/components/schemas/CreateBotOptionModel"
          }
        }
      },
      "GreetingBotModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BotBaseModel"
          }
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "IdentifierReferenceBaseModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "SimpleTagReferenceModel": "#/components/schemas/SimpleTagReferenceModel",
            "TagModel": "#/components/schemas/TagModel",
            "ReferenceBaseModel": "#/components/schemas/ReferenceBaseModel",
            "ReferenceNullableNameBaseModel": "#/components/schemas/ReferenceNullableNameBaseModel",
            "SectorReferenceModel": "#/components/schemas/SectorReferenceModel",
            "SectorReferenceIdModel": "#/components/schemas/SectorReferenceIdModel",
            "ScheduledMessageReferenceModel": "#/components/schemas/ScheduledMessageReferenceModel",
            "UTalkUserIdReferenceModel": "#/components/schemas/UTalkUserIdReferenceModel",
            "SimpleOrganizationMemberReferenceModel": "#/components/schemas/SimpleOrganizationMemberReferenceModel",
            "OrganizationMemberReferenceModel": "#/components/schemas/OrganizationMemberReferenceModel",
            "SimpleUTalkUserModel": "#/components/schemas/SimpleUTalkUserModel",
            "UTalkUserDetailsModel": "#/components/schemas/UTalkUserDetailsModel",
            "OrganizationFieldReferenceModel": "#/components/schemas/OrganizationFieldReferenceModel",
            "OrganizationReferenceModel": "#/components/schemas/OrganizationReferenceModel",
            "OrganizationReferenceIdModel": "#/components/schemas/OrganizationReferenceIdModel",
            "MessageFromContactModel": "#/components/schemas/MessageFromContactModel",
            "MessageReferenceModel": "#/components/schemas/MessageReferenceModel",
            "MessageReplyReferenceModel": "#/components/schemas/MessageReplyReferenceModel",
            "ContactReferenceModel": "#/components/schemas/ContactReferenceModel",
            "ChatFilterModel": "#/components/schemas/ChatFilterModel",
            "ChatIdReferenceModel": "#/components/schemas/ChatIdReferenceModel",
            "ChannelReferenceIdModel": "#/components/schemas/ChannelReferenceIdModel",
            "ChannelReferenceModel": "#/components/schemas/ChannelReferenceModel",
            "BulkSendSessionReferenceModel": "#/components/schemas/BulkSendSessionReferenceModel"
          }
        }
      },
      "IdentitifierShortReference": {
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "A reference to the ObjectId",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "IdentitifierShortReference": "#/components/schemas/IdentitifierShortReference",
            "TagReferenceIdModel": "#/components/schemas/TagReferenceIdModel",
            "ChannelReferenceId": "#/components/schemas/ChannelReferenceId",
            "SimpleChannelReference": "#/components/schemas/SimpleChannelReference",
            "ChatChannelReferenceId": "#/components/schemas/ChatChannelReferenceId",
            "ChatFilter": "#/components/schemas/ChatFilter",
            "MessageReferenceId": "#/components/schemas/MessageReferenceId",
            "MessageReplyReference": "#/components/schemas/MessageReplyReference",
            "OrganizationReferenceId": "#/components/schemas/OrganizationReferenceId",
            "ShortReference": "#/components/schemas/ShortReference",
            "NullableNameShortReference": "#/components/schemas/NullableNameShortReference",
            "ActivityReferenceId": "#/components/schemas/ActivityReferenceId",
            "BotInstanceReference": "#/components/schemas/BotInstanceReference",
            "BulkSendSessionReferenceId": "#/components/schemas/BulkSendSessionReferenceId",
            "ChannelReference": "#/components/schemas/ChannelReference",
            "ChatIdReference": "#/components/schemas/ChatIdReference",
            "ChatReference": "#/components/schemas/ChatReference",
            "ContactReferenceId": "#/components/schemas/ContactReferenceId",
            "ContactReference": "#/components/schemas/ContactReference",
            "MemberReferenceId": "#/components/schemas/MemberReferenceId",
            "MessageReference": "#/components/schemas/MessageReference",
            "OrganizationFieldReference": "#/components/schemas/OrganizationFieldReference",
            "OrganizationFieldReferenceId": "#/components/schemas/OrganizationFieldReferenceId",
            "OrganizationMemberReference": "#/components/schemas/OrganizationMemberReference",
            "OrganizationReference": "#/components/schemas/OrganizationReference",
            "ScheduledMessageReference": "#/components/schemas/ScheduledMessageReference",
            "ScheduledMessageReferenceId": "#/components/schemas/ScheduledMessageReferenceId",
            "SectorReference": "#/components/schemas/SectorReference",
            "SectorReferenceId": "#/components/schemas/SectorReferenceId",
            "SimpleOrganizationMemberReference": "#/components/schemas/SimpleOrganizationMemberReference",
            "TagReference": "#/components/schemas/TagReference",
            "TagReferenceId": "#/components/schemas/TagReferenceId",
            "TemplateReference": "#/components/schemas/TemplateReference",
            "WebhookReference": "#/components/schemas/WebhookReference",
            "BotReference": "#/components/schemas/BotReference"
          }
        }
      },
      "InteractiveStepModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowchartBotStepModel"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "InteractiveStepModel": "#/components/schemas/InteractiveStepModel",
            "TemplateMessageStepModel": "#/components/schemas/TemplateMessageStepModel",
            "RegexStepModel": "#/components/schemas/RegexStepModel",
            "OptionsStepModel": "#/components/schemas/OptionsStepModel"
          }
        }
      },
      "InternalErrorBasicDetails": {
        "type": "object",
        "properties": {
          "incidentId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LastMessage": {
        "enum": [
          "Contact",
          "Member",
          "All"
        ],
        "type": "string"
      },
      "LocationModel": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "MemberAllowedChannelModel": {
        "required": [
          "channels"
        ],
        "type": "object",
        "properties": {
          "allChannelsEnable": {
            "type": "boolean"
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        },
        "additionalProperties": false
      },
      "MemberAllowedChannels": {
        "type": "object",
        "properties": {
          "allChannelsEnable": {
            "type": "boolean"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelReferenceId"
            }
          }
        },
        "additionalProperties": false
      },
      "MemberAllowedSectorModel": {
        "required": [
          "sectors"
        ],
        "type": "object",
        "properties": {
          "allSectorsEnable": {
            "type": "boolean"
          },
          "sectors": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        },
        "additionalProperties": false
      },
      "MemberAllowedSectors": {
        "type": "object",
        "properties": {
          "allSectorsEnable": {
            "type": "boolean"
          },
          "sectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SectorReferenceId"
            }
          }
        },
        "additionalProperties": false
      },
      "MemberReferenceId": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "additionalProperties": false
      },
      "MemberTransferActionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowchartActionModel"
          }
        ],
        "properties": {
          "options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberTransferModel"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "MemberTransferModel": {
        "type": "object",
        "properties": {
          "memberIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          "strategy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberTransferStrategy"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "MemberTransferStrategy": {
        "enum": [
          "Direct",
          "RoundRobin",
          "LoadBalancing",
          "LastMemberFromSameChatChannel"
        ],
        "type": "string"
      },
      "MessageFileModel": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "A URL to the uploaded file",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          },
          "contentType": {
            "type": "string",
            "description": "The original content-type of the file",
            "nullable": true
          },
          "originalName": {
            "type": "string",
            "description": "The original name of the file",
            "nullable": true
          },
          "originalSizeBytes": {
            "type": "integer",
            "description": "The original size of the file, expressed in bytes",
            "format": "int64",
            "nullable": true
          },
          "data": {
            "type": "string",
            "description": "Binary data of the file, when applicable",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageFromContactModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierReferenceBaseModel"
          }
        ],
        "additionalProperties": false
      },
      "MessageModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "prefix": {
            "type": "string",
            "description": "The message's prefix. Usually the name of the person who sent the message, which is included in the final message sent. But stored separately because of not being relevant for search",
            "nullable": true
          },
          "headerContent": {
            "type": "string",
            "description": "Header of the message. Exclusive for templates.",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "The written content of the message.",
            "nullable": true
          },
          "footer": {
            "type": "string",
            "description": "Footer of the message. Exclusive for templates.",
            "nullable": true
          },
          "file": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageFileModel"
              }
            ],
            "description": "If the message includes a file, this will have its details",
            "nullable": true
          },
          "thumbnail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageFileModel"
              }
            ],
            "description": "In supported channels, a file message may include a thumbnail of the file before loading the full file",
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatContactModel"
            },
            "description": "If the message type is a contact card, this will include them",
            "nullable": true
          },
          "messageType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageTypes"
              }
            ],
            "description": "The type of the message sent originally"
          },
          "sentByOrganizationMember": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SimpleOrganizationMemberReferenceModel"
              },
              {
                "$ref": "#/components/schemas/OrganizationMemberReferenceModel"
              }
            ],
            "description": "Basic data of the CompanyMember that sent this message, null if sent by the contact.",
            "nullable": true
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Private messages should not be sent to the contact. It's visible only to CompanyMembers"
          },
          "location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LocationModel"
              }
            ],
            "description": "If the message is of type location, this will include the coordinates",
            "nullable": true
          },
          "question": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BotQuestionModel"
              },
              {
                "$ref": "#/components/schemas/ObjectiveBotQuestionModel"
              },
              {
                "$ref": "#/components/schemas/SubjectiveQuestionModel"
              }
            ],
            "description": "If the message was sent by a bot who asked a question, this will include the presented options",
            "nullable": true
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageSources"
              }
            ],
            "description": "Where the message came from"
          },
          "inReplyTo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageReplyReferenceModel"
              }
            ],
            "description": "If the message is a reply of another message, this will include the other message's id",
            "nullable": true
          },
          "messageState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageStates"
              }
            ],
            "description": "The most current state of this message"
          },
          "eventAtUTC": {
            "type": "string",
            "description": "The time the message was sent or received. Instead of the time it was saved in our database",
            "format": "date-time"
          },
          "chat": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatIdReferenceModel"
              }
            ],
            "description": "The details of the associated chat"
          },
          "fromContact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageFromContactModel"
              }
            ],
            "description": "If the message was sent by a member, this will include their information",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "description": "If the message is a template, this will include its id",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "buttons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateButtonModel"
            },
            "description": "If the message includes buttons the contact can press, this will include them",
            "nullable": true
          },
          "botInstance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BotInstanceReference"
              }
            ],
            "description": "If the message was sent by a bot, this will include its instance id",
            "nullable": true
          },
          "forwardedFrom": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageReferenceModel"
              }
            ],
            "description": "If the message was forwarded, this will include the Id of the original message",
            "nullable": true
          },
          "scheduledMessage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScheduledMessageReferenceModel"
              }
            ],
            "description": "If the message was scheduled, this will include the schedule Id",
            "nullable": true
          },
          "bulkSendSession": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BulkSendSessionReferenceModel"
              }
            ],
            "description": "Used to group messages by a bulk send session",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "properties": {
          "eventAtUTC": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "MessageReferenceId": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "properties": {
          "eventAtUTC": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "MessageReferenceModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierReferenceBaseModel"
          }
        ],
        "properties": {
          "eventAtUTC": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "MessageReplyReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "properties": {
          "chatId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "MessageReplyReferenceModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierReferenceBaseModel"
          }
        ],
        "properties": {
          "chatId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "MessageSources": {
        "enum": [
          "Contact",
          "Member",
          "External",
          "Bot"
        ],
        "type": "string"
      },
      "MessageStateModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "type": "string"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageStates"
              }
            ],
            "description": "The state of this message"
          },
          "eventAtUTC": {
            "type": "string",
            "description": "Timestamp of the event",
            "format": "date-time",
            "nullable": true
          },
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FriendlyErrorReasons"
              }
            ],
            "description": "Generic reason of the error",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "MessageStateModel": "#/components/schemas/MessageStateModel",
            "FullMessageStateModel": "#/components/schemas/FullMessageStateModel"
          }
        }
      },
      "MessageStates": {
        "enum": [
          "Processing",
          "Sent",
          "Received",
          "Read",
          "Redacted",
          "Failed",
          "Deleted",
          "Submitted",
          "Played"
        ],
        "type": "string"
      },
      "MessageStatesModel": {
        "type": "object",
        "properties": {
          "states": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/MessageStateModel"
                },
                {
                  "$ref": "#/components/schemas/FullMessageStateModel"
                }
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "MessageTypes": {
        "enum": [
          "Text",
          "Image",
          "Video",
          "Audio",
          "Sticker",
          "Location",
          "Contact",
          "File",
          "Payment",
          "List",
          "ListReply",
          "CallAttempt",
          "QuickReply",
          "Poll"
        ],
        "type": "string",
        "description": "All the possibilities of a message"
      },
      "ModelBase": {
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The Id of the object generated automatically",
            "example": "AB_12-xyzEXAMPLE"
          },
          "createdAtUTC": {
            "type": "string",
            "description": "The exact time the entity was created in UTC",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "WebhookModel": "#/components/schemas/WebhookModel",
            "ActivityLogSimpleModel": "#/components/schemas/ActivityLogSimpleModel",
            "UserNotificationModel": "#/components/schemas/UserNotificationModel",
            "SimpleTemplateModel": "#/components/schemas/SimpleTemplateModel",
            "TemplateModel": "#/components/schemas/TemplateModel",
            "SectorModel": "#/components/schemas/SectorModel",
            "ScheduledMessageModel": "#/components/schemas/ScheduledMessageModel",
            "QuickAnswerModel": "#/components/schemas/QuickAnswerModel",
            "SimpleQuickAnswerModel": "#/components/schemas/SimpleQuickAnswerModel",
            "OrganizationMemberModel": "#/components/schemas/OrganizationMemberModel",
            "OrganizationMemberSingleOrganizationModel": "#/components/schemas/OrganizationMemberSingleOrganizationModel",
            "OrganizationFieldModel": "#/components/schemas/OrganizationFieldModel",
            "FullOrganizationDetailsModel": "#/components/schemas/FullOrganizationDetailsModel",
            "OrganizationCardModel": "#/components/schemas/OrganizationCardModel",
            "OrganizationDetailsModel": "#/components/schemas/OrganizationDetailsModel",
            "SimpleOrganizationModel": "#/components/schemas/SimpleOrganizationModel",
            "UmblerOrganizationModel": "#/components/schemas/UmblerOrganizationModel",
            "OrganizationFlagModel": "#/components/schemas/OrganizationFlagModel",
            "NotificationModel": "#/components/schemas/NotificationModel",
            "MessageModel": "#/components/schemas/MessageModel",
            "ContactModel": "#/components/schemas/ContactModel",
            "SimpleContactModel": "#/components/schemas/SimpleContactModel",
            "NoteModel": "#/components/schemas/NoteModel",
            "BasicChatModel": "#/components/schemas/BasicChatModel",
            "ChatModel": "#/components/schemas/ChatModel",
            "AdminChannelModel": "#/components/schemas/AdminChannelModel",
            "BasicChannelModel": "#/components/schemas/BasicChannelModel",
            "ChannelModel": "#/components/schemas/ChannelModel",
            "BasicBulkSendSessionModel": "#/components/schemas/BasicBulkSendSessionModel",
            "BulkSendSessionModel": "#/components/schemas/BulkSendSessionModel",
            "TaggingBotModel": "#/components/schemas/TaggingBotModel",
            "BotBaseModel": "#/components/schemas/BotBaseModel",
            "SectorForwardingBotModel": "#/components/schemas/SectorForwardingBotModel",
            "GreetingBotModel": "#/components/schemas/GreetingBotModel",
            "TemplateMessageStepModel": "#/components/schemas/TemplateMessageStepModel",
            "WebhookActionModel": "#/components/schemas/WebhookActionModel",
            "TimeOfDayStepModel": "#/components/schemas/TimeOfDayStepModel",
            "TagActionModel": "#/components/schemas/TagActionModel",
            "StartManualEntryActionModel": "#/components/schemas/StartManualEntryActionModel",
            "FlowchartActionModel": "#/components/schemas/FlowchartActionModel",
            "FlowchartBotEventModel": "#/components/schemas/FlowchartBotEventModel",
            "FlowchartBotModel": "#/components/schemas/FlowchartBotModel",
            "FlowchartBotStepModel": "#/components/schemas/FlowchartBotStepModel",
            "InteractiveStepModel": "#/components/schemas/InteractiveStepModel",
            "SetWaitingStateActionModel": "#/components/schemas/SetWaitingStateActionModel",
            "SendMessageActionModel": "#/components/schemas/SendMessageActionModel",
            "SectorTransferActionModel": "#/components/schemas/SectorTransferActionModel",
            "RegexStepModel": "#/components/schemas/RegexStepModel",
            "OptionsStepModel": "#/components/schemas/OptionsStepModel",
            "MemberTransferActionModel": "#/components/schemas/MemberTransferActionModel",
            "FlowchartBotManualStartedEventModel": "#/components/schemas/FlowchartBotManualStartedEventModel",
            "DayOfTheWeekStepModel": "#/components/schemas/DayOfTheWeekStepModel",
            "CloseChatActionModel": "#/components/schemas/CloseChatActionModel",
            "FlowchartBotChatStartedEventModel": "#/components/schemas/FlowchartBotChatStartedEventModel",
            "ChangeChatPrivateStateActionModel": "#/components/schemas/ChangeChatPrivateStateActionModel",
            "ActivityLogModel": "#/components/schemas/ActivityLogModel"
          }
        }
      },
      "NoteModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "content": {
            "type": "string"
          },
          "createdBy": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "NotificationModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "additionalProperties": false,
        "description": "Model containing only the basic info to display a chat"
      },
      "NullableNameShortReference": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "A copy of the name",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "ContactReference": "#/components/schemas/ContactReference"
          }
        }
      },
      "ObjectiveBotQuestionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BotQuestionModel"
          }
        ],
        "properties": {
          "buttonText": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectiveOptionModel"
            }
          }
        },
        "additionalProperties": false
      },
      "ObjectiveOptionModel": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "OfficialConversationWindowInfoModel": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "id": {
            "type": "string"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string"
          },
          "billable": {
            "type": "boolean",
            "nullable": true
          },
          "singlePackageId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OptionsStepModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/InteractiveStepModel"
          }
        ],
        "properties": {
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BotOptionModel"
            }
          },
          "text": {
            "type": "string"
          },
          "defaultNextStep": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "Order": {
        "enum": [
          "Asc",
          "Desc"
        ],
        "type": "string"
      },
      "OrganizationCardModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "iconUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          }
        },
        "additionalProperties": false
      },
      "OrganizationConversationWindowModel": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "exceeding": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OrganizationDetailsModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "financeEmail": {
            "type": "string",
            "nullable": true
          },
          "financeWhatsapp": {
            "type": "string",
            "nullable": true
          },
          "cnpj": {
            "type": "string",
            "nullable": true
          },
          "socialReason": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "cep": {
            "type": "string",
            "nullable": true
          },
          "road": {
            "type": "string",
            "nullable": true
          },
          "neighbourhood": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "complement": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "iconUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          }
        },
        "additionalProperties": false
      },
      "OrganizationFieldModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "salesCloser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationMemberReferenceModel"
              }
            ],
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SimpleTagReferenceModel"
                },
                {
                  "$ref": "#/components/schemas/TagModel"
                }
              ]
            },
            "nullable": true
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationFieldReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagReference"
            },
            "nullable": true
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "salesCloser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationMemberReference"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationFieldReferenceId": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "additionalProperties": false
      },
      "OrganizationFieldReferenceModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierReferenceBaseModel"
          }
        ],
        "properties": {
          "salesCloser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationMemberReferenceModel"
              }
            ],
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SimpleTagReferenceModel"
                },
                {
                  "$ref": "#/components/schemas/TagModel"
                }
              ]
            },
            "nullable": true
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationFlagModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationInviteModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "allowedSector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedSectorModel"
              }
            ]
          },
          "allowedChannel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedChannelModel"
              }
            ]
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permissions"
            }
          },
          "validUntilUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationMemberActivationStatusModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "active": {
            "type": "boolean"
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "OrganizationMemberModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string"
          },
          "signature": {
            "type": "string",
            "nullable": true
          },
          "cellphone": {
            "type": "string",
            "nullable": true
          },
          "messageEndChat": {
            "type": "string",
            "nullable": true
          },
          "profilePictureUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          },
          "statusActivity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusActivity"
              }
            ]
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationReferenceModel"
            }
          },
          "umblerAccountId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "OrganizationMemberReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SimpleOrganizationMemberReference"
          }
        ],
        "properties": {
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string"
          },
          "profilePictureUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          },
          "statusActivity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusActivity"
              }
            ]
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permissions"
            }
          },
          "allowedSectors": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedSectors"
              }
            ],
            "nullable": true
          },
          "allowedChannels": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedChannels"
              }
            ],
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "lastBotTransferenceUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "joinedAtUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationMemberReferenceModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SimpleOrganizationMemberReferenceModel"
          }
        ],
        "properties": {
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string"
          },
          "statusActivity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusActivity"
              }
            ]
          },
          "profilePictureUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permissions"
            }
          },
          "allowedSector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedSectorModel"
              }
            ],
            "nullable": true
          },
          "allowedChannel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedChannelModel"
              }
            ],
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "lastBotTransferenceUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationMemberSingleOrganizationModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "profilePictureUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          },
          "statusActivity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusActivity"
              }
            ]
          },
          "organization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationReferenceModel"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "OrganizationMemberStatusModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "statusActivity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusActivity"
              }
            ]
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "OrganizationPreferencesDetailsModel": {
        "type": "object",
        "properties": {
          "messageEndChat": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShortReference"
          }
        ],
        "properties": {
          "iconUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          },
          "utalkToken": {
            "type": "string",
            "nullable": true
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permissions"
            }
          },
          "active": {
            "type": "boolean"
          },
          "allowedSectors": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedSectors"
              }
            ],
            "nullable": true
          },
          "allowedChannels": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedChannels"
              }
            ],
            "nullable": true
          },
          "chatFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatFilter"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationReferenceId": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "additionalProperties": false
      },
      "OrganizationReferenceIdModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierReferenceBaseModel"
          }
        ],
        "additionalProperties": false
      },
      "OrganizationReferenceModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceBaseModel"
          }
        ],
        "properties": {
          "iconUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permissions"
            }
          },
          "active": {
            "type": "boolean"
          },
          "allowedSectors": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedSectorModel"
              }
            ],
            "nullable": true
          },
          "allowedChannels": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedChannelModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationSinglePackageModel": {
        "type": "object",
        "properties": {
          "expirationDateUTC": {
            "type": "string",
            "format": "date-time"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "consumed": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PaginationBehavior": {
        "enum": [
          "GetSliceOnly",
          "CountAllAndGetSlice",
          "CountOnly"
        ],
        "type": "string"
      },
      "PaginationInfo": {
        "type": "object",
        "properties": {
          "totalItems": {
            "type": "integer",
            "description": "The total amount of items that can be queried.",
            "format": "int32"
          },
          "skipped": {
            "type": "integer",
            "description": "How many items were skipped. How many there are before the first item in the list",
            "format": "int32"
          },
          "took": {
            "type": "integer",
            "description": "The amount of items taken after the specified offset. This number equals the number of items in the list",
            "format": "int32"
          },
          "maxTake": {
            "type": "integer",
            "description": "The maximum amount of items this route can return in a single request",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PaginationOfActivityLogModel": {
        "type": "object",
        "properties": {
          "page": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationInfo"
              }
            ],
            "description": "Information for pagination purposes",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityLogModel"
            },
            "description": "The items in the selected slice. Will be empty if the operation is count-only"
          }
        },
        "additionalProperties": false
      },
      "PaginationOfBasicBulkSendSessionModel": {
        "type": "object",
        "properties": {
          "page": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationInfo"
              }
            ],
            "description": "Information for pagination purposes",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BasicBulkSendSessionModel"
                },
                {
                  "$ref": "#/components/schemas/BulkSendSessionModel"
                }
              ]
            },
            "description": "The items in the selected slice. Will be empty if the operation is count-only"
          }
        },
        "additionalProperties": false
      },
      "PaginationOfBasicChatModel": {
        "type": "object",
        "properties": {
          "page": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationInfo"
              }
            ],
            "description": "Information for pagination purposes",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BasicChatModel"
                },
                {
                  "$ref": "#/components/schemas/ChatModel"
                }
              ],
              "description": "Model containing only the basic info to display a chat"
            },
            "description": "The items in the selected slice. Will be empty if the operation is count-only"
          }
        },
        "additionalProperties": false
      },
      "PaginationOfBotBaseModel": {
        "type": "object",
        "properties": {
          "page": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationInfo"
              }
            ],
            "description": "Information for pagination purposes",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BotBaseModel"
                },
                {
                  "$ref": "#/components/schemas/TaggingBotModel"
                },
                {
                  "$ref": "#/components/schemas/SectorForwardingBotModel"
                },
                {
                  "$ref": "#/components/schemas/GreetingBotModel"
                },
                {
                  "$ref": "#/components/schemas/FlowchartBotModel"
                }
              ]
            },
            "description": "The items in the selected slice. Will be empty if the operation is count-only"
          }
        },
        "additionalProperties": false
      },
      "PaginationOfFlowchartBotModel": {
        "type": "object",
        "properties": {
          "page": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationInfo"
              }
            ],
            "description": "Information for pagination purposes",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlowchartBotModel"
            },
            "description": "The items in the selected slice. Will be empty if the operation is count-only"
          }
        },
        "additionalProperties": false
      },
      "PaginationOfReportsContactsConversationWindowModel": {
        "type": "object",
        "properties": {
          "page": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationInfo"
              }
            ],
            "description": "Information for pagination purposes",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportsContactsConversationWindowModel"
            },
            "description": "The items in the selected slice. Will be empty if the operation is count-only"
          }
        },
        "additionalProperties": false
      },
      "PaginationOfScheduledMessageModel": {
        "type": "object",
        "properties": {
          "page": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationInfo"
              }
            ],
            "description": "Information for pagination purposes",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduledMessageModel"
            },
            "description": "The items in the selected slice. Will be empty if the operation is count-only"
          }
        },
        "additionalProperties": false
      },
      "PaginationOfSimpleContactModel": {
        "type": "object",
        "properties": {
          "page": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationInfo"
              }
            ],
            "description": "Information for pagination purposes",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SimpleContactModel"
                },
                {
                  "$ref": "#/components/schemas/ContactModel"
                }
              ]
            },
            "description": "The items in the selected slice. Will be empty if the operation is count-only"
          }
        },
        "additionalProperties": false
      },
      "PaginationOfSimpleQuickAnswerModel": {
        "type": "object",
        "properties": {
          "page": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationInfo"
              }
            ],
            "description": "Information for pagination purposes",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleQuickAnswerModel"
            },
            "description": "The items in the selected slice. Will be empty if the operation is count-only"
          }
        },
        "additionalProperties": false
      },
      "PaginationOfSimpleTemplateModel": {
        "type": "object",
        "properties": {
          "page": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationInfo"
              }
            ],
            "description": "Information for pagination purposes",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleTemplateModel"
            },
            "description": "The items in the selected slice. Will be empty if the operation is count-only"
          }
        },
        "additionalProperties": false
      },
      "PaginationOfStickerModel": {
        "type": "object",
        "properties": {
          "page": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationInfo"
              }
            ],
            "description": "Information for pagination purposes",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StickerModel"
            },
            "description": "The items in the selected slice. Will be empty if the operation is count-only"
          }
        },
        "additionalProperties": false
      },
      "PaginationOfTagModel": {
        "type": "object",
        "properties": {
          "page": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationInfo"
              }
            ],
            "description": "Information for pagination purposes",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagModel"
            },
            "description": "The items in the selected slice. Will be empty if the operation is count-only"
          }
        },
        "additionalProperties": false
      },
      "PaginationOfUserNotificationModel": {
        "type": "object",
        "properties": {
          "page": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationInfo"
              }
            ],
            "description": "Information for pagination purposes",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNotificationModel"
            },
            "description": "The items in the selected slice. Will be empty if the operation is count-only"
          }
        },
        "additionalProperties": false
      },
      "PermissionOrganizationMemberModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permissions"
            }
          },
          "allowedSector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedSectorModel"
              }
            ]
          },
          "allowedChannel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedChannelModel"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Permissions": {
        "enum": [
          "Member",
          "Operator",
          "Admin",
          "Owner"
        ],
        "type": "string"
      },
      "PhoneNumberWabaStatus": {
        "enum": [
          "CreateWaba",
          "MigrateWaba"
        ],
        "type": "string"
      },
      "PhoneType": {
        "enum": [
          "Landline",
          "Mobile"
        ],
        "type": "string"
      },
      "PositionModel": {
        "type": "object",
        "properties": {
          "x": {
            "type": "integer",
            "format": "int32"
          },
          "y": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "QuickAnswerModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "organizationMember": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationMemberReferenceModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QuickAnswerVisibility": {
        "enum": [
          "All",
          "Mine"
        ],
        "type": "string"
      },
      "QuickAnswersProperty": {
        "enum": [
          "Name",
          "Content",
          "OrganizationMember",
          "CreatedAtUTC"
        ],
        "type": "string"
      },
      "RedactReason": {
        "enum": [
          "PrivatedBySomeoneElse",
          "InDisallowedSector",
          "InDisallowedChannel"
        ],
        "type": "string"
      },
      "ReferenceBaseModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierReferenceBaseModel"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "SimpleTagReferenceModel": "#/components/schemas/SimpleTagReferenceModel",
            "TagModel": "#/components/schemas/TagModel",
            "SectorReferenceModel": "#/components/schemas/SectorReferenceModel",
            "OrganizationReferenceModel": "#/components/schemas/OrganizationReferenceModel",
            "ChatFilterModel": "#/components/schemas/ChatFilterModel",
            "ChannelReferenceModel": "#/components/schemas/ChannelReferenceModel"
          }
        }
      },
      "ReferenceNullableNameBaseModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierReferenceBaseModel"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "ContactReferenceModel": "#/components/schemas/ContactReferenceModel"
          }
        }
      },
      "RegexOptionModel": {
        "type": "object",
        "properties": {
          "pattern": {
            "type": "string"
          },
          "stepId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "RegexStepModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/InteractiveStepModel"
          }
        ],
        "properties": {
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegexOptionModel"
            }
          },
          "text": {
            "type": "string"
          },
          "canUseLastMessage": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RegionChartModel": {
        "type": "object",
        "properties": {
          "zoneName": {
            "type": "string"
          },
          "stateName": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "total": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RelativeMessagesResponseModel": {
        "type": "object",
        "properties": {
          "hasMessagesBeforeAllowedOrganizationPlan": {
            "type": "boolean"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageModel"
            }
          }
        },
        "additionalProperties": false
      },
      "ReportBaseConversationsWindowModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "properties": {
          "_t": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "conversationsWindows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportConversationsWindowModel"
            }
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "ReportBaseConversationsWindowModel": "#/components/schemas/ReportBaseConversationsWindowModel",
            "ReportChannelConversationsWindowModel": "#/components/schemas/ReportChannelConversationsWindowModel",
            "ReportOrganizationConversationsWindowModel": "#/components/schemas/ReportOrganizationConversationsWindowModel"
          }
        }
      },
      "ReportChannelConversationsWindowModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBaseConversationsWindowModel"
          }
        ],
        "additionalProperties": false
      },
      "ReportChartCountModel": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ReportChartModel": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ReportContactMostChatModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "totalChats": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ReportConversationsWindowModel": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ReportConversationsWindowSearchType": {
        "enum": [
          "Free",
          "Purchased",
          "SinglePackage"
        ],
        "type": "string"
      },
      "ReportExceededModel": {
        "type": "object",
        "properties": {
          "exceeded": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ReportOrganizationConversationsWindowModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportBaseConversationsWindowModel"
          }
        ],
        "additionalProperties": false
      },
      "ReportOrganizationExceededConversationsWindowModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "exceededs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportExceededModel"
            }
          }
        },
        "additionalProperties": false
      },
      "ReportOrganizationMemberModel": {
        "type": "object",
        "properties": {
          "organizationMemberId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "name": {
            "type": "string"
          },
          "started": {
            "type": "integer",
            "format": "int32"
          },
          "participated": {
            "type": "integer",
            "format": "int32"
          },
          "closed": {
            "type": "integer",
            "format": "int32"
          },
          "medianResponse": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ReportSectorModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "noParticipated": {
            "type": "integer",
            "format": "int32"
          },
          "participated": {
            "type": "integer",
            "format": "int32"
          },
          "closed": {
            "type": "integer",
            "format": "int32"
          },
          "medianResponse": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ReportTagModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "emoji": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Color"
              }
            ]
          },
          "noParticipated": {
            "type": "integer",
            "format": "int32"
          },
          "participated": {
            "type": "integer",
            "format": "int32"
          },
          "closed": {
            "type": "integer",
            "format": "int32"
          },
          "medianResponse": {
            "type": "integer",
            "format": "int32"
          },
          "contacts": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ReportsContactsConversationWindowModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string"
          },
          "profilePictureUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          },
          "officialConversationWindows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfficialConversationWindowInfoModel"
            }
          }
        },
        "additionalProperties": false
      },
      "RequiredEditAddressModel": {
        "required": [
          "addressLine1",
          "city",
          "country",
          "state",
          "zipCode"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EditAddressModel"
          }
        ],
        "properties": {
          "addressLine1": {
            "minLength": 1,
            "type": "string"
          },
          "city": {
            "minLength": 1,
            "type": "string"
          },
          "country": {
            "minLength": 1,
            "type": "string"
          },
          "state": {
            "minLength": 1,
            "type": "string"
          },
          "zipCode": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ScheduledMessageModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScheduledMessageStatus"
              }
            ]
          },
          "templateId": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "params": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "message": {
            "type": "string"
          },
          "dateSendAtUtc": {
            "type": "string",
            "format": "date-time"
          },
          "contact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactReferenceModel"
              }
            ]
          },
          "channel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelReferenceModel"
              }
            ]
          },
          "messageReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageReferenceModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScheduledMessageModelBus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "umblerAccountId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ScheduledMessageReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ScheduledMessageStatus"
              }
            ]
          },
          "deleted": {
            "type": "boolean"
          },
          "channelReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelReference"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ScheduledMessageReferenceId": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "additionalProperties": false
      },
      "ScheduledMessageReferenceModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierReferenceBaseModel"
          }
        ],
        "additionalProperties": false
      },
      "ScheduledMessageStatus": {
        "enum": [
          "Pending",
          "Error",
          "Sent"
        ],
        "type": "string"
      },
      "SectorForwardingBotModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BotBaseModel"
          }
        ],
        "properties": {
          "body": {
            "type": "string"
          },
          "sectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SectorReferenceId"
            }
          },
          "prefix": {
            "type": "string"
          },
          "sendTransferSectorMessage": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SectorModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SectorReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShortReference"
          }
        ],
        "properties": {
          "default": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SectorReferenceId": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "additionalProperties": false
      },
      "SectorReferenceIdModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierReferenceBaseModel"
          }
        ],
        "additionalProperties": false
      },
      "SectorReferenceModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceBaseModel"
          }
        ],
        "properties": {
          "default": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SectorTransferActionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowchartActionModel"
          }
        ],
        "properties": {
          "sectorId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "SendMessageActionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowchartActionModel"
          }
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "isPrivate": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SendOrganizationInviteModel": {
        "required": [
          "allowedChannel",
          "allowedSector",
          "email",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "email": {
            "maxLength": 200,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$",
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permissions"
            }
          },
          "allowedSector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedSectorModel"
              }
            ]
          },
          "allowedChannel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedChannelModel"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "SerializedErrorResult": {
        "type": "object",
        "properties": {
          "exception": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SerializedException"
              }
            ],
            "nullable": true
          },
          "incidentId": {
            "type": "string",
            "nullable": true
          },
          "friendlyError": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": { }
          }
        },
        "additionalProperties": false
      },
      "SerializedException": {
        "type": "object",
        "properties": {
          "stackTrace": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "exceptionType": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "additionalProperties": { }
          },
          "innerExceptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SerializedException"
            }
          }
        },
        "additionalProperties": false
      },
      "SetWaitingStateActionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowchartActionModel"
          }
        ],
        "properties": {
          "waiting": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ShortReference": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "A copy of the name"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "ChatFilter": "#/components/schemas/ChatFilter",
            "ChannelReference": "#/components/schemas/ChannelReference",
            "ChatReference": "#/components/schemas/ChatReference",
            "OrganizationReference": "#/components/schemas/OrganizationReference",
            "SectorReference": "#/components/schemas/SectorReference",
            "TagReference": "#/components/schemas/TagReference",
            "WebhookReference": "#/components/schemas/WebhookReference"
          }
        }
      },
      "SimpleChannelReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "properties": {
          "displayName": {
            "type": "string"
          },
          "channelType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChannelsType"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "SimpleContactModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "profilePictureUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          },
          "isBlocked": {
            "type": "boolean"
          },
          "groupIdentifier": {
            "type": "string",
            "nullable": true
          },
          "channelIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "SimpleContactModel": "#/components/schemas/SimpleContactModel",
            "ContactModel": "#/components/schemas/ContactModel"
          }
        }
      },
      "SimpleOrganizationMemberReference": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "muted": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "SimpleOrganizationMemberReference": "#/components/schemas/SimpleOrganizationMemberReference",
            "OrganizationMemberReference": "#/components/schemas/OrganizationMemberReference"
          }
        }
      },
      "SimpleOrganizationMemberReferenceModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierReferenceBaseModel"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "muted": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "SimpleOrganizationMemberReferenceModel": "#/components/schemas/SimpleOrganizationMemberReferenceModel",
            "OrganizationMemberReferenceModel": "#/components/schemas/OrganizationMemberReferenceModel"
          }
        }
      },
      "SimpleOrganizationModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "messageEndChat": {
            "type": "string",
            "nullable": true
          },
          "iconUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          },
          "templateSubmissionLimit": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "templatesLimitMultiplier": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxStarterChannel": {
            "type": "integer",
            "format": "int32"
          },
          "maxMembers": {
            "type": "integer",
            "format": "int32"
          },
          "hasSentFirstMessage": {
            "type": "boolean"
          },
          "maxDaysMessageHistoric": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "exceedingConversationWindows": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "contractStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractStatus"
              }
            ]
          },
          "contractPlan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractPlan"
              }
            ],
            "nullable": true
          },
          "freeUntilUTC": {
            "type": "string",
            "format": "date-time"
          },
          "templates": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "chats": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "organizationMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationMemberReferenceModel"
            }
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelReferenceModel"
            }
          },
          "sectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SectorReferenceModel"
            }
          },
          "flags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationFlagModel"
            }
          },
          "organizationFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationFieldReferenceModel"
              }
            ],
            "nullable": true
          },
          "hasContractPendence": {
            "type": "boolean",
            "readOnly": true
          },
          "maxStarterChannelReached": {
            "type": "boolean",
            "readOnly": true
          },
          "supportData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupportDataModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "SimpleOrganizationModel": "#/components/schemas/SimpleOrganizationModel",
            "FullOrganizationDetailsModel": "#/components/schemas/FullOrganizationDetailsModel",
            "UmblerOrganizationModel": "#/components/schemas/UmblerOrganizationModel"
          }
        }
      },
      "SimpleQuickAnswerModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "organizationMember": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganizationMemberReferenceModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SimpleTagReferenceModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ReferenceBaseModel"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "SimpleTagReferenceModel": "#/components/schemas/SimpleTagReferenceModel",
            "TagModel": "#/components/schemas/TagModel"
          }
        }
      },
      "SimpleTemplateModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "channel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SimpleChannelReference"
              }
            ]
          },
          "label": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "header": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TemplateHeaderModel"
              }
            ],
            "nullable": true
          },
          "content": {
            "type": "string"
          },
          "footer": {
            "type": "string",
            "nullable": true
          },
          "buttons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateButtonModel"
            },
            "nullable": true
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateExampleModel"
            }
          },
          "templateType": {
            "type": "string"
          },
          "approvedAtUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SimpleUTalkUserModel": {
        "required": [
          "_t"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierReferenceBaseModel"
          }
        ],
        "properties": {
          "_t": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "profilePictureUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          },
          "emailAddress": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "_t",
          "mapping": {
            "SimpleUTalkUserModel": "#/components/schemas/SimpleUTalkUserModel",
            "UTalkUserDetailsModel": "#/components/schemas/UTalkUserDetailsModel"
          }
        }
      },
      "SourceRange": {
        "type": "object",
        "properties": {
          "range": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SourceRanges": {
        "type": "object",
        "properties": {
          "lastUpdatedUTC": {
            "type": "string",
            "format": "date-time"
          },
          "ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceRange"
            }
          }
        },
        "additionalProperties": false
      },
      "StartManualEntryActionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowchartBotStepModel"
          }
        ],
        "properties": {
          "botId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "manualEventId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "StatusActivity": {
        "enum": [
          "Absent",
          "Offline",
          "Online"
        ],
        "type": "string"
      },
      "StepTimeOfDayRangeModel": {
        "required": [
          "range"
        ],
        "type": "object",
        "properties": {
          "range": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeOnlyRangeModel"
              }
            ]
          },
          "stepId": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "StickerModel": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com"
          }
        },
        "additionalProperties": false
      },
      "SubjectiveQuestionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BotQuestionModel"
          }
        ],
        "additionalProperties": false
      },
      "SupportDataModel": {
        "type": "object",
        "properties": {
          "userHash": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SwapBotsModel": {
        "required": [
          "botId1",
          "botId2",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "botId1": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "botId2": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "organizationId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "SwappedBotsModel": {
        "type": "object",
        "additionalProperties": false
      },
      "TagActionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowchartActionModel"
          }
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          },
          "contactTags": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        },
        "additionalProperties": false
      },
      "TagModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SimpleTagReferenceModel"
          }
        ],
        "properties": {
          "emoji": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Color"
              }
            ]
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "createdAtUTC": {
            "type": "string",
            "description": "The exact time the entity was created in UTC",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "TagProperty": {
        "enum": [
          "Name",
          "CreatedAtUTC",
          "Order"
        ],
        "type": "string"
      },
      "TagReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShortReference"
          }
        ],
        "additionalProperties": false
      },
      "TagReferenceId": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "additionalProperties": false
      },
      "TagReferenceIdModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "additionalProperties": false
      },
      "TaggingBotModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BotBaseModel"
          }
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagReferenceIdModel"
            }
          }
        },
        "additionalProperties": false
      },
      "TakeDirection": {
        "enum": [
          "TakeBefore",
          "TakeAfter"
        ],
        "type": "string"
      },
      "TemplateButtonModel": {
        "required": [
          "text",
          "type"
        ],
        "type": "object",
        "properties": {
          "text": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string"
          },
          "type": {
            "minLength": 1,
            "type": "string"
          },
          "phoneNumber": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "url": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "variable": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TemplateButtonVariableModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TemplateButtonVariableModel": {
        "required": [
          "example",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string"
          },
          "example": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TemplateCategoryModel": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string"
          },
          "deprecated": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TemplateExampleCreateModel": {
        "required": [
          "example",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string"
          },
          "example": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TemplateExampleModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "example": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TemplateHeaderCreateModel": {
        "required": [
          "content"
        ],
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 60,
            "minLength": 1,
            "type": "string"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateExampleCreateModel"
            }
          }
        },
        "additionalProperties": false
      },
      "TemplateHeaderModel": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateExampleModel"
            }
          }
        },
        "additionalProperties": false
      },
      "TemplateMediaModel": {
        "type": "object",
        "properties": {
          "mediaId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TemplateMessageOptionModel": {
        "type": "object",
        "properties": {
          "buttonText": {
            "type": "string"
          },
          "stepId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "TemplateMessageStepModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/InteractiveStepModel"
          }
        ],
        "properties": {
          "templateId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "params": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateMessageOptionModel"
            }
          }
        },
        "additionalProperties": false
      },
      "TemplateModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "channelId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "label": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "templateType": {
            "type": "string"
          },
          "header": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TemplateHeaderModel"
              }
            ],
            "nullable": true
          },
          "content": {
            "type": "string"
          },
          "footer": {
            "type": "string",
            "nullable": true
          },
          "example": {
            "type": "string",
            "nullable": true
          },
          "buttons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ButtonTemplateModel"
            },
            "nullable": true
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateExampleModel"
            }
          },
          "status": {
            "type": "string"
          },
          "approvedAtUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "templateId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TemplateProperty": {
        "enum": [
          "Channel",
          "Label",
          "Category",
          "Status",
          "CreatedAtUTC"
        ],
        "type": "string"
      },
      "TemplateReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentitifierShortReference"
          }
        ],
        "properties": {
          "status": {
            "type": "string"
          },
          "templateId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TemplateType": {
        "enum": [
          "Text",
          "Image",
          "Video",
          "Document"
        ],
        "type": "string"
      },
      "TimeOfDayStepModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowchartBotStepModel"
          }
        ],
        "properties": {
          "ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepTimeOfDayRangeModel"
            }
          },
          "timeZone": {
            "type": "string",
            "description": "IANA timezone code",
            "format": "time-zone-id"
          }
        },
        "additionalProperties": false
      },
      "TimeOnlyRangeModel": {
        "required": [
          "end",
          "start"
        ],
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "time"
          },
          "end": {
            "type": "string",
            "format": "time"
          }
        },
        "additionalProperties": false
      },
      "UTalkUserDetailsModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SimpleUTalkUserModel"
          }
        ],
        "properties": {
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationReferenceModel"
            }
          },
          "signature": {
            "type": "string",
            "nullable": true
          },
          "cellphone": {
            "type": "string",
            "nullable": true
          },
          "messageEndChat": {
            "type": "string",
            "nullable": true
          },
          "statusActivity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusActivity"
              }
            ]
          },
          "umblerAccountId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "UTalkUserIdReferenceModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentifierReferenceBaseModel"
          }
        ],
        "additionalProperties": false
      },
      "UmblerOrganizationModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FullOrganizationDetailsModel"
          }
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagModel"
            }
          }
        },
        "additionalProperties": false
      },
      "UndefinableOfNullableOfObjectId": {
        "type": "string",
        "nullable": true,
        "example": "AB_12-xyzEXAMPLE"
      },
      "UndefinableOfNullableOfPhoneNumber": {
        "pattern": "^\\+[1-9]\\d{1,14}$",
        "type": "string",
        "description": "A phone number in the E.164 standard",
        "nullable": true,
        "example": "+5511987654321"
      },
      "UndefinableOfString": {
        "type": "string",
        "nullable": true
      },
      "UpdateBotModel": {
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UpdateChannelModel": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "about": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "businessWebsites": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryRequiredEditAddressModel"
              }
            ],
            "nullable": true
          },
          "businessType": {
            "type": "string",
            "nullable": true
          },
          "pictureDataUrl": {
            "type": "string",
            "nullable": true
          },
          "defaultSectorId": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "UpdateChatModel": {
        "type": "object",
        "properties": {
          "open": {
            "type": "boolean",
            "nullable": true
          },
          "sectorId": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "memberId": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "private": {
            "type": "boolean",
            "nullable": true
          },
          "mute": {
            "type": "boolean",
            "nullable": true
          },
          "waiting": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateContactModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/EditAddressModel"
              },
              {
                "$ref": "#/components/schemas/RequiredEditAddressModel"
              },
              {
                "$ref": "#/components/schemas/CountryRequiredEditAddressModel"
              }
            ],
            "nullable": true
          },
          "landline": {
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string",
            "description": "A phone number in the E.164 standard",
            "nullable": true,
            "example": "+5511987654321"
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "profilePictureUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateOrganizationMemberModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 80,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "signature": {
            "type": "string",
            "nullable": true
          },
          "cellphone": {
            "pattern": "^\\+[1-9]\\d{1,14}$",
            "type": "string",
            "description": "A phone number in the E.164 standard",
            "nullable": true,
            "example": "+5511987654321"
          },
          "messageEndChat": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateOrganizationMemberStatusModel": {
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "closeChats": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UpdateOrganizationModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 500,
            "minLength": 5,
            "type": "string",
            "nullable": true
          },
          "financeEmail": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "financeWhatsapp": {
            "type": "string",
            "nullable": true
          },
          "cnpj": {
            "type": "string",
            "nullable": true
          },
          "socialReason": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "format": "tel",
            "nullable": true
          },
          "cep": {
            "type": "string",
            "nullable": true
          },
          "road": {
            "type": "string",
            "nullable": true
          },
          "neighbourhood": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "complement": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "iconUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true,
            "example": "https://example.com"
          }
        },
        "additionalProperties": false
      },
      "UpdateOrganizationPreferencesModel": {
        "required": [
          "messageEndChat"
        ],
        "type": "object",
        "properties": {
          "messageEndChat": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdatePermissionOrganizationMemberModel": {
        "required": [
          "memberId"
        ],
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permissions"
            }
          },
          "allowedSector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedSectorModel"
              }
            ],
            "nullable": true
          },
          "allowedChannel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedChannelModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateQuickAnswerModel": {
        "required": [
          "content",
          "name",
          "visibility"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 160,
            "minLength": 0,
            "type": "string"
          },
          "visibility": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuickAnswerVisibility"
              }
            ]
          },
          "content": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateScheduledMessageModel": {
        "required": [
          "dateSendAtUTC",
          "message"
        ],
        "type": "object",
        "properties": {
          "dateSendAtUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "message": {
            "minLength": 1,
            "type": "string"
          },
          "templateId": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "params": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateSectorModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 24,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "isNewDefault": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UpdateSectorOrderModel": {
        "type": "object",
        "properties": {
          "order": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UpdateTagModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 30,
            "pattern": "^[a-zA-Z\\u00C0-\\u00FF 0-9]{1,}$",
            "type": "string",
            "nullable": true
          },
          "emoji": {
            "pattern": "(\\u00a9|\\u00ae|[\\u2000-\\u3300]|\\ud83c[\\ud000-\\udfff]|\\ud83d[\\ud000-\\udfff]|\\ud83e[\\ud000-\\udfff])?",
            "type": "string",
            "nullable": true
          },
          "color": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Color"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "UpdateTagOrderModel": {
        "type": "object",
        "properties": {
          "order": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UpdateTemplateModel": {
        "required": [
          "label",
          "templateId"
        ],
        "type": "object",
        "properties": {
          "templateId": {
            "type": "string",
            "example": "AB_12-xyzEXAMPLE"
          },
          "label": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateWebhookModel": {
        "required": [
          "channelIds",
          "name",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com"
          },
          "channelIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        },
        "additionalProperties": false
      },
      "UserNotificationModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "activityLogModel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActivityLogSimpleModel"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "UserPermissionsModel": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permissions"
            }
          },
          "allowedSector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedSectorModel"
              }
            ]
          },
          "allowedChannel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberAllowedChannelModel"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ValidationProblemDetails": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebhookActionModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FlowchartBotStepModel"
          }
        ],
        "properties": {
          "uri": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com"
          },
          "onSuccess": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          },
          "onFail": {
            "type": "string",
            "nullable": true,
            "example": "AB_12-xyzEXAMPLE"
          }
        },
        "additionalProperties": false
      },
      "WebhookModel": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelBase"
          }
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "forChannels": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "AB_12-xyzEXAMPLE"
            }
          }
        },
        "additionalProperties": false
      },
      "WebhookReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShortReference"
          }
        ],
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 12345abcdef\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}